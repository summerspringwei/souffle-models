2023-03-09 21:51:02 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_adaptive_avg_pool2d"
2023-03-09 21:51:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule":"meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

2023-03-09 21:51:02 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2023-03-09 21:51:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(11), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(14), T.int64(14)):
                        with T.block("adaptive_pool_sum"):
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 < T.int64(672))
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(672))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2023-03-09 21:51:02 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":16})
            adaptive_pool_sum_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(672), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(49)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(672), ax1 + ax0_ax1_ax2_ax3_0_fused)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) // T.int64(14))
                            v_rv1 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(4) + ax4_ax5_fused_1) % T.int64(14))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(4), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(T.int64(0) * T.int64(4) + ax3_1 < T.int64(1))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=0)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2023-03-09 21:51:35 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:51:35 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-03-09 21:51:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:51:36 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-03-09 21:51:37 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:51:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:51:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:51:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:51:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9874  0.9830  0.9759  0.9758  0.9535  0.9449  0.9378  0.9314  0.9156  0.9100  0.9076  0.9047  0.9037  0.8968  0.8933
[17 : 32]:	0.8874  0.8864  0.8791  0.8525  0.8495  0.8459  0.8363  0.8355  0.8157  0.8087  0.7971  0.7970  0.7881  0.7811  0.7741  0.7668
[33 : 48]:	0.7654  0.7638  0.7512  0.7459  0.7457  0.7341  0.7276  0.7266  0.7263  0.7201  0.7129  0.7113  0.7021  0.7011  0.6988  0.6980
[49 : 64]:	0.6933  0.6883  0.6817  0.6790  0.6783  0.6775  0.6663  0.6660  0.6639  0.6611  0.6606  0.6565  0.6522  0.6436  0.6418  0.6407
2023-03-09 21:51:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-03-09 21:51:41 [INFO] [evolutionary_search.cc:730] Sending 62 candidates(s) for measurement
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #1: GFLOPs: 16.5781. Time: 7.9855 us. Best GFLOPs: 16.5781
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #2: GFLOPs: 36.9451. Time: 3.5833 us. Best GFLOPs: 36.9451
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #3: GFLOPs: 16.5822. Time: 7.9835 us. Best GFLOPs: 36.9451
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #4: GFLOPs: 26.3023. Time: 5.0332 us. Best GFLOPs: 36.9451
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #5: GFLOPs: 38.9309. Time: 3.4005 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #6: GFLOPs: 14.5875. Time: 9.0752 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #7: GFLOPs: 6.9483. Time: 19.0526 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #8: GFLOPs: 15.0569. Time: 8.7923 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #9: GFLOPs: 7.1337. Time: 18.5575 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #10: GFLOPs: 14.5291. Time: 9.1116 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #11: GFLOPs: 12.5306. Time: 10.5648 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #12: GFLOPs: 4.0677. Time: 32.5454 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #13: GFLOPs: 6.1181. Time: 21.6380 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #14: GFLOPs: 6.1341. Time: 21.5815 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #15: GFLOPs: 4.0665. Time: 32.5546 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #16: GFLOPs: 4.2383. Time: 31.2348 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #17: GFLOPs: 14.5415. Time: 9.1039 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #18: GFLOPs: 6.1476. Time: 21.5344 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #19: GFLOPs: 4.0663. Time: 32.5565 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #20: GFLOPs: 12.1683. Time: 10.8794 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #21: GFLOPs: 14.5369. Time: 9.1068 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #22: GFLOPs: 37.0974. Time: 3.5686 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #23: GFLOPs: 4.2302. Time: 31.2952 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #24: GFLOPs: 12.5304. Time: 10.5651 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #25: GFLOPs: 4.0759. Time: 32.4800 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #26: GFLOPs: 10.1141. Time: 13.0890 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #27: GFLOPs: 9.7708. Time: 13.5490 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #28: GFLOPs: 12.5306. Time: 10.5648 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #29: GFLOPs: 4.2288. Time: 31.3050 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #30: GFLOPs: 9.7690. Time: 13.5514 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #31: GFLOPs: 16.5437. Time: 8.0021 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #32: GFLOPs: 9.7885. Time: 13.5245 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #33: GFLOPs: 36.1903. Time: 3.6580 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #34: GFLOPs: 4.2300. Time: 31.2962 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #35: GFLOPs: 12.1694. Time: 10.8784 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #36: GFLOPs: 16.5854. Time: 7.9820 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #37: GFLOPs: 4.2296. Time: 31.2996 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #38: GFLOPs: 14.3375. Time: 9.2334 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #39: GFLOPs: 13.8641. Time: 9.5487 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #40: GFLOPs: 38.9006. Time: 3.4031 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #41: GFLOPs: 26.2843. Time: 5.0366 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #42: GFLOPs: 6.9602. Time: 19.0201 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #43: GFLOPs: 12.5308. Time: 10.5647 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #44: GFLOPs: 36.9518. Time: 3.5826 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #45: GFLOPs: 9.9646. Time: 13.2854 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #46: GFLOPs: 6.1185. Time: 21.6368 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #47: GFLOPs: 36.2023. Time: 3.6568 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #48: GFLOPs: 7.1339. Time: 18.5570 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #49: GFLOPs: 16.5507. Time: 7.9987 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #50: GFLOPs: 37.1075. Time: 3.5676 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #51: GFLOPs: 38.9032. Time: 3.4029 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #52: GFLOPs: 37.0986. Time: 3.5684 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #53: GFLOPs: 4.0753. Time: 32.4848 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #54: GFLOPs: 10.0984. Time: 13.1094 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #55: GFLOPs: 13.8619. Time: 9.5502 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #56: GFLOPs: 14.4804. Time: 9.1423 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #57: GFLOPs: 4.0656. Time: 32.5620 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #58: GFLOPs: 6.1892. Time: 21.3894 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #59: GFLOPs: 13.8909. Time: 9.5302 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #60: GFLOPs: 14.5267. Time: 9.1131 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #61: GFLOPs: 10.0628. Time: 13.1558 us. Best GFLOPs: 38.9309
2023-03-09 21:53:30 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #62: GFLOPs: 9.7752. Time: 13.5429 us. Best GFLOPs: 38.9309
2023-03-09 21:53:31 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:53:31 [INFO] [evolutionary_search.cc:715] Picked top 62 candidate(s) from database
2023-03-09 21:53:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:53:32 [INFO] [evolutionary_search.cc:723] Sampled 450 candidate(s)
2023-03-09 21:53:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:53:37 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:53:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:53:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:53:43 [INFO] [evolutionary_search.cc:649] Scores of the best 38 candidates:
[1 : 16]:	0.9987  0.9987  0.9942  0.9848  0.9848  0.9802  0.9754  0.9563  0.9563  0.9563  0.9563  0.9505  0.9418  0.9418  0.9399  0.9399
[17 : 32]:	0.9340  0.9327  0.9308  0.9260  0.6753  0.6753  0.6753  0.5581  0.5581  0.5581  0.5558  0.5558  0.4080  0.4080  0.3966  0.3966
[33 : 38]:	0.3966  0.3921  0.3907  0.3771  0.3771  0.3689
2023-03-09 21:53:43 [INFO] [evolutionary_search.cc:727] Got 38 candidate(s) with evolutionary search
2023-03-09 21:53:43 [INFO] [evolutionary_search.cc:730] Sending 37 candidates(s) for measurement
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #63: GFLOPs: 36.4449. Time: 3.6324 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #64: GFLOPs: 36.4365. Time: 3.6333 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #65: GFLOPs: 36.4604. Time: 3.6309 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #66: GFLOPs: 36.4486. Time: 3.6321 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #67: GFLOPs: 37.0031. Time: 3.5776 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #68: GFLOPs: 36.4575. Time: 3.6312 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #69: GFLOPs: 36.4608. Time: 3.6309 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #70: GFLOPs: 37.0522. Time: 3.5729 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #71: GFLOPs: 37.0506. Time: 3.5731 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #72: GFLOPs: 37.0959. Time: 3.5687 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #73: GFLOPs: 37.0896. Time: 3.5693 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #74: GFLOPs: 37.0741. Time: 3.5708 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #75: GFLOPs: 37.0816. Time: 3.5701 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #76: GFLOPs: 37.0813. Time: 3.5701 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #77: GFLOPs: 36.3679. Time: 3.6401 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #78: GFLOPs: 36.3736. Time: 3.6396 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #79: GFLOPs: 36.3742. Time: 3.6395 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #80: GFLOPs: 37.0776. Time: 3.5705 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #81: GFLOPs: 34.6913. Time: 3.8161 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #82: GFLOPs: 34.6920. Time: 3.8160 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #83: GFLOPs: 26.0069. Time: 5.0903 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #84: GFLOPs: 26.0081. Time: 5.0901 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #85: GFLOPs: 26.0051. Time: 5.0907 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #86: GFLOPs: 34.5954. Time: 3.8266 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #87: GFLOPs: 34.6017. Time: 3.8259 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #88: GFLOPs: 34.5990. Time: 3.8262 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #89: GFLOPs: 34.5988. Time: 3.8263 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #90: GFLOPs: 34.5948. Time: 3.8267 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #91: GFLOPs: 16.6743. Time: 7.9394 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #92: GFLOPs: 16.6629. Time: 7.9448 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #93: GFLOPs: 16.2873. Time: 8.1280 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #94: GFLOPs: 16.3828. Time: 8.0807 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #95: GFLOPs: 16.3309. Time: 8.1064 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #96: GFLOPs: 14.9359. Time: 8.8635 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #97: GFLOPs: 14.9376. Time: 8.8625 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #98: GFLOPs: 14.4101. Time: 9.1869 us. Best GFLOPs: 38.9309
2023-03-09 21:53:58 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #99: GFLOPs: 14.4093. Time: 9.1874 us. Best GFLOPs: 38.9309
2023-03-09 21:54:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:54:52 [INFO] [evolutionary_search.cc:715] Picked top 99 candidate(s) from database
2023-03-09 21:54:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:54:53 [INFO] [evolutionary_search.cc:723] Sampled 413 candidate(s)
2023-03-09 21:54:55 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:54:58 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:55:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:55:02 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778a255e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789ab618)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a7758)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c91288)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778eee988)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a79f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a7398)]: 0 failure(s)
2023-03-09 21:55:04 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.3720
2023-03-09 21:55:04 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2023-03-09 21:55:04 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2023-03-09 21:55:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #100: GFLOPs: 14.7923. Time: 8.9495 us. Best GFLOPs: 38.9309
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_adaptive_avg_pool2d"
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule":"meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

2023-04-12 17:16:41 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(14), T.int64(14)):
                        with T.block("adaptive_pool_sum"):
                            T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(672))
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(672))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            adaptive_pool_sum_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(672), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            T.where(ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1 < T.int64(196))
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(672), ax1 + ax0_ax1_ax2_ax3_0_fused)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) // T.int64(14))
                            v_rv1 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(64) + ax4_ax5_fused_1) % T.int64(14))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(T.int64(0) * T.int64(64) + ax3_1 < T.int64(1))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=4)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2023-04-12 17:16:50 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:16:50 [INFO] [evolutionary_search.cc:715] Picked top 100 candidate(s) from database
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe3c4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f21cb88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f6dadc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe82228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f698338)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f21a3f8)]: 0 failure(s)
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:723] Sampled 412 candidate(s)
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe3c4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f21cb88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f6dadc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe82228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f698338)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f21a3f8)]: 0 failure(s)
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe3c4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f21cb88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f6dadc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe82228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f698338)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f21a3f8)]: 0 failure(s)
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe3c4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f21cb88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f6dadc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe82228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f698338)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f21a3f8)]: 0 failure(s)
2023-04-12 17:16:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe3c4a8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f21cb88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219848)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f6dadc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe82228)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f698338)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f21a3f8)]: 0 failure(s)
2023-04-12 17:16:52 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9980  0.9970  0.9954  0.9902  0.9864  0.9817  0.9778  0.9467  0.9461  0.9459  0.9450  0.9380  0.9249  0.9233  0.9226  0.9170
[17 : 32]:	0.9162  0.9079  0.8873  0.8853  0.8769  0.8704  0.8634  0.8610  0.8596  0.8522  0.8369  0.8233  0.8176  0.7971  0.7966  0.7933
[33 : 48]:	0.7842  0.7736  0.7735  0.7732  0.7721  0.7651  0.7463  0.7456  0.7452  0.7432  0.7373  0.7324  0.7281  0.7146  0.7006  0.6985
[49 : 64]:	0.6858  0.6825  0.6672  0.6577  0.6501  0.6493  0.6418  0.6377  0.6298  0.6266  0.6148  0.6045  0.5955  0.5884  0.5838  0.5791
2023-04-12 17:16:52 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-04-12 17:16:52 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:160] Initializing Task #1: "fused_nn_adaptive_avg_pool2d"
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for ax0, ax1, ax2, ax3, rv0, rv1 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(14), T.int64(14)):
            with T.block("adaptive_pool_sum"):
                v_ax0, v_ax1, v_ax2, v_ax3, v_rv0, v_rv1 = T.axis.remap("SSSSRR", [ax0, ax1, ax2, ax3, rv0, rv1])
                T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                with T.init():
                    adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("adaptive_pool_avg"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                T.block_attr({"schedule_rule":"meta_schedule.adaptive_pool_avg"})
                adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

2023-04-12 17:23:50 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            adaptive_pool_sum = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(21), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for rv0, rv1 in T.grid(T.int64(14), T.int64(14)):
                        with T.block("adaptive_pool_sum"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1)
                            v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_rv0, v_rv1 = T.axis.remap("RR", [rv0, rv1])
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(3), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(672))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), T.int64(0))
                        T.reads(adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5, l6, l7 = sch.get_loops(block=b1)
l8 = sch.fuse(l4, l5, l6, l7, preserve_unit_iters=True)
v9 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
l10, l11 = sch.split(loop=l8, factors=[None, v9], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="blockIdx.x")
sch.bind(loop=l11, thread_axis="threadIdx.x")
l12, l13, l14, l15, l16, l17 = sch.get_loops(block=b0)
l18 = sch.fuse(l12, l13, l14, l15, preserve_unit_iters=True)
v19 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
l20, l21 = sch.split(loop=l18, factors=[None, v19], preserve_unit_iters=True)
sch.bind(loop=l20, thread_axis="blockIdx.x")
sch.bind(loop=l21, thread_axis="threadIdx.x")
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(14), T.int64(14)), "float32"], adaptive_pool_avg: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":64})
            adaptive_pool_sum_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for ax0_ax1_ax2_ax3_0_fused in T.thread_binding(T.int64(672), thread="blockIdx.x"):
                for ax0, ax1, ax2, ax3, ax4_ax5_fused_0 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(25)):
                    for ax4_ax5_fused_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                        with T.block("adaptive_pool_sum"):
                            T.where(ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1 < T.int64(196))
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(672), ax1 + ax0_ax1_ax2_ax3_0_fused)
                            v_ax2, v_ax3 = T.axis.remap("SS", [ax2, ax3])
                            v_rv0 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1) // T.int64(14))
                            v_rv1 = T.axis.reduce(T.int64(14), (ax4_ax5_fused_0 * T.int64(8) + ax4_ax5_fused_1) % T.int64(14))
                            T.reads(p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1])
                            T.writes(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                            with T.init():
                                adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = T.float32(0)
                            adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] + p0[v_ax0, v_ax1, v_ax2 * T.int64(14) + v_rv0, v_ax3 * T.int64(14) + v_rv1]
                for ax3_1 in T.thread_binding(T.int64(8), thread="threadIdx.x"):
                    with T.block("adaptive_pool_avg"):
                        T.where(T.int64(0) * T.int64(8) + ax3_1 < T.int64(1))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_0_fused)
                        v_ax2 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax3 = T.axis.spatial(T.int64(1), ax3_1)
                        T.reads(adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3])
                        adaptive_pool_avg[v_ax0, v_ax1, v_ax2, v_ax3] = adaptive_pool_sum_shared[v_ax0, v_ax1, v_ax2, v_ax3] * T.float32(0.0051020408163265302)
    

b0 = sch.get_block(name="adaptive_pool_sum", func_name="main")
b1 = sch.get_block(name="adaptive_pool_avg", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b1, ann_key="schedule_rule")
b3, = sch.get_consumers(block=b0)
l4, l5, l6, l7 = sch.get_loops(block=b3)
v8 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=1)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l10, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l9, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l11, l12, l13, l14, l15, l16, l17, l18, l19, l20 = sch.get_loops(block=b0)
l21 = sch.fuse(l19, l20, preserve_unit_iters=True)
l22, l23 = sch.split(loop=l21, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l23, thread_axis="threadIdx.x")
v24 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v24)
l25, l26, l27, l28, l29 = sch.get_loops(block=b1)
l30 = sch.fuse(l25, l26, l27, l28, preserve_unit_iters=True)
sch.bind(loop=l30, thread_axis="blockIdx.x")
2023-04-12 17:23:59 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:23:59 [INFO] [evolutionary_search.cc:715] Picked top 100 candidate(s) from database
2023-04-12 17:23:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:23:59 [INFO] [evolutionary_search.cc:723] Sampled 412 candidate(s)
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9928  0.9925  0.9869  0.9756  0.9751  0.9728  0.9691  0.9643  0.9583  0.9535  0.9399  0.9139  0.9107  0.8986  0.8910  0.8857
[17 : 32]:	0.8830  0.8816  0.8749  0.8648  0.8629  0.8610  0.8505  0.8421  0.8401  0.8368  0.8297  0.8261  0.8221  0.8186  0.8129  0.8117
[33 : 48]:	0.8006  0.8001  0.7897  0.7875  0.7806  0.7778  0.7773  0.7718  0.7712  0.7708  0.7658  0.7647  0.7614  0.7510  0.7417  0.7405
[49 : 64]:	0.7371  0.7344  0.7240  0.7164  0.7114  0.7083  0.7082  0.6997  0.6982  0.6959  0.6836  0.6735  0.6717  0.6685  0.6662  0.6511
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-04-12 17:24:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #1: GFLOPs: 16.3253. Time: 8.1091 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #2: GFLOPs: 12.4892. Time: 10.5998 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #3: GFLOPs: 4.2589. Time: 31.0841 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #4: GFLOPs: 7.1006. Time: 18.6441 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #5: GFLOPs: 14.1340. Time: 9.3663 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #6: GFLOPs: 6.2236. Time: 21.2714 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #7: GFLOPs: 14.7085. Time: 9.0005 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #8: GFLOPs: 9.8186. Time: 13.4829 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #9: GFLOPs: 10.2257. Time: 12.9462 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #10: GFLOPs: 4.1143. Time: 32.1763 us. Best GFLOPs: 16.3253
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #11: GFLOPs: 37.3317. Time: 3.5462 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #12: GFLOPs: 14.9557. Time: 8.8517 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #13: GFLOPs: 4.2601. Time: 31.0752 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #14: GFLOPs: 4.1142. Time: 32.1776 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #15: GFLOPs: 37.3233. Time: 3.5470 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #16: GFLOPs: 14.4281. Time: 9.1755 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #17: GFLOPs: 12.1249. Time: 10.9183 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #18: GFLOPs: 6.2235. Time: 21.2716 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #19: GFLOPs: 35.0094. Time: 3.7814 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #20: GFLOPs: 14.9028. Time: 8.8832 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #21: GFLOPs: 37.1781. Time: 3.5608 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #22: GFLOPs: 7.1748. Time: 18.4512 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #23: GFLOPs: 6.1414. Time: 21.5561 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #24: GFLOPs: 36.7097. Time: 3.6062 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #25: GFLOPs: 4.1141. Time: 32.1782 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #26: GFLOPs: 10.0244. Time: 13.2062 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #27: GFLOPs: 10.0247. Time: 13.2057 us. Best GFLOPs: 37.3317
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #28: GFLOPs: 39.6337. Time: 3.3402 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #29: GFLOPs: 39.6315. Time: 3.3404 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #30: GFLOPs: 6.2647. Time: 21.1319 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #31: GFLOPs: 6.2228. Time: 21.2742 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #32: GFLOPs: 14.9269. Time: 8.8688 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #33: GFLOPs: 25.9863. Time: 5.0944 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #34: GFLOPs: 6.2229. Time: 21.2736 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #35: GFLOPs: 37.8167. Time: 3.5007 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #36: GFLOPs: 10.1457. Time: 13.0482 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #37: GFLOPs: 14.6025. Time: 9.0658 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #38: GFLOPs: 10.3640. Time: 12.7735 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #39: GFLOPs: 37.8091. Time: 3.5014 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #40: GFLOPs: 10.1487. Time: 13.0445 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #41: GFLOPs: 12.3245. Time: 10.7415 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #42: GFLOPs: 37.2221. Time: 3.5566 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #43: GFLOPs: 37.8316. Time: 3.4993 us. Best GFLOPs: 39.6337
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #44: GFLOPs: 39.6351. Time: 3.3401 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #45: GFLOPs: 39.2756. Time: 3.3706 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #46: GFLOPs: 4.1136. Time: 32.1820 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #47: GFLOPs: 7.0963. Time: 18.6554 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #48: GFLOPs: 6.2233. Time: 21.2723 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #49: GFLOPs: 10.1301. Time: 13.0683 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #50: GFLOPs: 4.1142. Time: 32.1777 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #51: GFLOPs: 9.8222. Time: 13.4780 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #52: GFLOPs: 12.4904. Time: 10.5989 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #53: GFLOPs: 10.0240. Time: 13.2067 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #54: GFLOPs: 25.3308. Time: 5.2262 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #55: GFLOPs: 4.2901. Time: 30.8581 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #56: GFLOPs: 12.2014. Time: 10.8499 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #57: GFLOPs: 12.4744. Time: 10.6124 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #58: GFLOPs: 35.0095. Time: 3.7814 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #59: GFLOPs: 37.8250. Time: 3.4999 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #60: GFLOPs: 9.8505. Time: 13.4393 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #61: GFLOPs: 35.0334. Time: 3.7788 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #62: GFLOPs: 4.1137. Time: 32.1815 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #63: GFLOPs: 39.6329. Time: 3.3403 us. Best GFLOPs: 39.6351
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #64: GFLOPs: 6.9610. Time: 19.0181 us. Best GFLOPs: 39.6351
2023-04-12 17:25:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:25:07 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-04-12 17:25:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:07 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2023-04-12 17:25:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:08 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:09 [INFO] [evolutionary_search.cc:649] Scores of the best 36 candidates:
[1 : 16]:	0.9945  0.9945  0.9932  0.9574  0.9534  0.9483  0.9452  0.9378  0.9377  0.9358  0.9327  0.9327  0.9072  0.9018  0.8954  0.8745
[17 : 32]:	0.8745  0.8726  0.6477  0.6477  0.6477  0.3998  0.3950  0.3950  0.3919  0.3605  0.3605  0.3605  0.3567  0.3557  0.3557  0.3557
[33 : 36]:	0.3536  0.3536  0.3526  0.3526
2023-04-12 17:25:09 [INFO] [evolutionary_search.cc:727] Got 36 candidate(s) with evolutionary search
2023-04-12 17:25:09 [INFO] [evolutionary_search.cc:730] Sending 35 candidates(s) for measurement
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #65: GFLOPs: 36.9947. Time: 3.5785 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #66: GFLOPs: 36.9979. Time: 3.5781 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #67: GFLOPs: 37.7342. Time: 3.5083 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #68: GFLOPs: 36.9929. Time: 3.5786 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #69: GFLOPs: 37.7188. Time: 3.5098 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #70: GFLOPs: 37.7143. Time: 3.5102 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #71: GFLOPs: 35.4157. Time: 3.7380 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #72: GFLOPs: 37.7017. Time: 3.5114 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #73: GFLOPs: 37.7355. Time: 3.5082 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #74: GFLOPs: 37.7357. Time: 3.5082 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #75: GFLOPs: 37.7359. Time: 3.5082 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #76: GFLOPs: 37.7350. Time: 3.5083 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #77: GFLOPs: 37.0616. Time: 3.5720 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #78: GFLOPs: 37.0712. Time: 3.5711 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #79: GFLOPs: 37.0809. Time: 3.5701 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #80: GFLOPs: 35.0161. Time: 3.7807 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #81: GFLOPs: 35.0264. Time: 3.7795 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #82: GFLOPs: 35.0211. Time: 3.7801 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #83: GFLOPs: 25.7870. Time: 5.1338 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #84: GFLOPs: 25.7836. Time: 5.1344 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #85: GFLOPs: 25.7818. Time: 5.1348 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #86: GFLOPs: 16.8690. Time: 7.8478 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #87: GFLOPs: 14.8914. Time: 8.8899 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #88: GFLOPs: 12.8509. Time: 10.3016 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #89: GFLOPs: 14.8964. Time: 8.8870 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #90: GFLOPs: 16.5301. Time: 8.0087 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #91: GFLOPs: 16.5300. Time: 8.0087 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #92: GFLOPs: 16.5299. Time: 8.0088 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #93: GFLOPs: 16.4329. Time: 8.0560 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #94: GFLOPs: 16.5310. Time: 8.0082 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #95: GFLOPs: 16.3272. Time: 8.1082 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #96: GFLOPs: 16.5278. Time: 8.0098 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #97: GFLOPs: 14.9561. Time: 8.8515 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #98: GFLOPs: 14.9536. Time: 8.8530 us. Best GFLOPs: 39.6351
2023-04-12 17:25:23 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #99: GFLOPs: 14.9820. Time: 8.8362 us. Best GFLOPs: 39.6351
2023-04-12 17:25:49 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:25:49 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-04-12 17:25:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:49 [INFO] [evolutionary_search.cc:723] Sampled 410 candidate(s)
2023-04-12 17:25:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:51 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:51 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b5102248)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964f68)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59656f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b614c848)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b551aa28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b6166c48)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b5964ba8)]: 0 failure(s)
2023-04-12 17:25:51 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.3733
2023-04-12 17:25:51 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2023-04-12 17:25:51 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2023-04-12 17:25:52 [INFO] [task_scheduler.cc:131] [Task #1: fused_nn_adaptive_avg_pool2d] Trial #100: GFLOPs: 14.6325. Time: 9.0473 us. Best GFLOPs: 39.6351
