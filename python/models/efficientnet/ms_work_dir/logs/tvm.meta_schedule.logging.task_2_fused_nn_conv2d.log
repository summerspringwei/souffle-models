2023-03-09 21:51:02 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d"
2023-03-09 21:51:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        fused_constant = T.allocate_const([0.840089, 1.83129, -0.0419421, -1.55088, -0.14187, -0.582137, 0.112819, -0.501912, -0.195748, -0.723022, 1.52218, -0.0980889, 1.8553, 0.935771, 0.42368, 0.0405793, 0.353494, -0.252916, -1.62, -0.173538, -1.36037...], "float32", [28, 672, 1, 1])
        fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_1[v_ff, v_rc, v_ry, v_rx]
    

2023-03-09 21:51:03 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-03-09 21:51:03 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":0})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            fused_constant_shared = T.alloc_buffer([28, 672, 1, 1], dtype="float32", scope="shared")
            fused_constant = T.allocate_const([0.840089, 1.83129, -0.0419421, -1.55088, -0.14187, -0.582137, 0.112819, -0.501912, -0.195748, -0.723022, 1.52218, -0.0980889, 1.8553, 0.935771, 0.42368, 0.0405793, 0.353494, -0.252916, -1.62, -0.173538, -1.36037...], "float32", [28, 672, 1, 1])
            fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(7), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(24), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(28)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(672), rc_0 * T.int64(28) + ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(784)):
                                with T.block("fused_constant_shared"):
                                    v0 = T.axis.spatial(28, ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(672, rc_0 * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    v2 = T.axis.spatial(1, T.int64(0))
                                    v3 = T.axis.spatial(1, T.int64(0))
                                    T.reads(fused_constant_1[v0, v1, v2, v3])
                                    T.writes(fused_constant_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    fused_constant_shared[v0, v1, v2, v3] = fused_constant_1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(28), ff_4 + nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(672), rc_0 * T.int64(28) + rc_1 * T.int64(4) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":1, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 2, 7, 2, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[24, 7, 4])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
2023-03-09 21:52:07 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:52:07 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-03-09 21:52:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f0f208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a77896b768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a77899e258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778f45988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778988368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a7b58)]: 512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a77896b5c8)]: 0 failure(s)
2023-03-09 21:52:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f0f208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a77896b768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a77899e258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778f45988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778988368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a7b58)]: 1024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a77896b5c8)]: 0 failure(s)
2023-03-09 21:52:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f0f208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a77896b768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a77899e258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778f45988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778988368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a7b58)]: 1536 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a77896b5c8)]: 0 failure(s)
2023-03-09 21:52:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f0f208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a77896b768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a77899e258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778f45988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778988368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a7b58)]: 2048 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a77896b5c8)]: 0 failure(s)
2023-03-09 21:52:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f0f208)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a77896b768)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a77899e258)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778f45988)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778988368)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789a7b58)]: 2560 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a77896b5c8)]: 0 failure(s)
2023-03-09 21:52:16 [WARNING] [evolutionary_search.cc:719] Cannot sample enough initial population, evolutionary search failed.
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d"
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        fused_constant = T.allocate_const([-1.11372, 1.61207, -1.66307, 0.206328, -1.49872, -0.0942739, 1.13119, -1.14709, 0.803694, 1.9005, -0.720736, -0.248063, -1.00584, -1.62509, -0.62806, 0.415078, -1.20113, -0.497123, 0.348745, 1.25734, -2.84793...], "float32", [28, 672, 1, 1])
        fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_1[v_ff, v_rc, v_ry, v_rx]
    

2023-04-12 17:16:41 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            fused_constant_shared = T.alloc_buffer([28, 672, 1, 1], dtype="float32", scope="shared")
            fused_constant = T.allocate_const([-1.11372, 1.61207, -1.66307, 0.206328, -1.49872, -0.0942739, 1.13119, -1.14709, 0.803694, 1.9005, -0.720736, -0.248063, -1.00584, -1.62509, -0.62806, 0.415078, -1.20113, -0.497123, 0.348745, 1.25734, -2.84793...], "float32", [28, 672, 1, 1])
            fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(7), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(336)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(672), rc_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(1344)):
                                with T.block("fused_constant_shared"):
                                    v0 = T.axis.spatial(28, nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused // T.int64(336))
                                    v1 = T.axis.spatial(672, rc_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused % T.int64(336))
                                    v2 = T.axis.spatial(1, T.int64(0))
                                    v3 = T.axis.spatial(1, T.int64(0))
                                    T.reads(fused_constant_1[v0, v1, v2, v3])
                                    T.writes(fused_constant_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    fused_constant_shared[v0, v1, v2, v3] = fused_constant_1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(56), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(2) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(672), rc_0 * T.int64(336) + rc_1 * T.int64(6) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":1, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[7, 2, 2, 1, 1])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[2, 56, 6])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
2023-04-12 17:17:15 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:17:15 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 17:17:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe837e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97fe23378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97fe5c968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe23308)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f219ff8)]: 512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f695d58)]: 0 failure(s)
2023-04-12 17:17:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe837e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97fe23378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97fe5c968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe23308)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f219ff8)]: 1024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f695d58)]: 0 failure(s)
2023-04-12 17:17:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe837e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97fe23378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97fe5c968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe23308)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f219ff8)]: 1536 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f695d58)]: 0 failure(s)
2023-04-12 17:17:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe837e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97fe23378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97fe5c968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe23308)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f219ff8)]: 2048 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f695d58)]: 0 failure(s)
2023-04-12 17:17:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97fe837e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97fe23378)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97f219898)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97fe5c968)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97fe23308)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f219ff8)]: 2560 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97f695d58)]: 0 failure(s)
2023-04-12 17:17:19 [WARNING] [evolutionary_search.cc:719] Cannot sample enough initial population, evolutionary search failed.
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:160] Initializing Task #2: "fused_nn_conv2d"
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        fused_constant = T.allocate_const([0.694994, 1.01717, 0.366858, 0.233455, 0.312226, -0.398968, -0.255582, 0.347052, 1.28278, 0.575073, -0.193449, 1.83125, -0.313862, 0.251935, -0.337382, 1.03763, -0.870428, -0.411727, 0.857857, 2.80601, 0.491699...], "float32", [28, 672, 1, 1])
        fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_1[v_ff, v_rc, v_ry, v_rx]
    

2023-04-12 17:23:50 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"], conv2d_nchw: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            fused_constant_shared = T.alloc_buffer([28, 672, 1, 1], dtype="float32", scope="shared")
            fused_constant = T.allocate_const([0.694994, 1.01717, 0.366858, 0.233455, 0.312226, -0.398968, -0.255582, 0.347052, 1.28278, 0.575073, -0.193449, 1.83125, -0.313862, 0.251935, -0.337382, 1.03763, -0.870428, -0.411727, 0.857857, 2.80601, 0.491699...], "float32", [28, 672, 1, 1])
            fused_constant_1 = T.buffer_decl([28, 672, 1, 1], dtype="float32", data=fused_constant)
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(672)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(672), ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(18816)):
                                with T.block("fused_constant_shared"):
                                    v0 = T.axis.spatial(28, ax0_ax1_ax2_ax3_fused // T.int64(672))
                                    v1 = T.axis.spatial(672, ax0_ax1_ax2_ax3_fused % T.int64(672))
                                    v2 = T.axis.spatial(1, T.int64(0))
                                    v3 = T.axis.spatial(1, T.int64(0))
                                    T.reads(fused_constant_1[v0, v1, v2, v3])
                                    T.writes(fused_constant_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    fused_constant_shared[v0, v1, v2, v3] = fused_constant_1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(672), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(28), nn_1_ff_1_yy_1_xx_1_fused * T.int64(14) + ff_3 * T.int64(14) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(672), rc_0 * T.int64(672) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], fused_constant_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":1, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * fused_constant_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0, v1, v2, v3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l3, l4, l5, l6, l7, l8, l9 = sch.get_loops(block=b1)
v10, v11, v12, v13, v14 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l15, l16, l17, l18, l19 = sch.split(loop=l3, factors=[v10, v11, v12, v13, v14], preserve_unit_iters=True)
v20, v21, v22, v23, v24 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 2, 1, 1, 14])
l25, l26, l27, l28, l29 = sch.split(loop=l4, factors=[v20, v21, v22, v23, v24], preserve_unit_iters=True)
v30, v31, v32, v33, v34 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l35, l36, l37, l38, l39 = sch.split(loop=l5, factors=[v30, v31, v32, v33, v34], preserve_unit_iters=True)
v40, v41, v42, v43, v44 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l45, l46, l47, l48, l49 = sch.split(loop=l6, factors=[v40, v41, v42, v43, v44], preserve_unit_iters=True)
v50, v51, v52 = sch.sample_perfect_tile(loop=l7, n=3, max_innermost_factor=64, decision=[1, 672, 1])
l53, l54, l55 = sch.split(loop=l7, factors=[v50, v51, v52], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l59, l60, l61 = sch.split(loop=l8, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l9, factors=[v62, v63, v64], preserve_unit_iters=True)
sch.reorder(l15, l25, l35, l45, l16, l26, l36, l46, l17, l27, l37, l47, l53, l59, l65, l54, l60, l66, l18, l28, l38, l48, l55, l61, l67, l19, l29, l39, l49)
l68 = sch.fuse(l15, l25, l35, l45, preserve_unit_iters=True)
sch.bind(loop=l68, thread_axis="blockIdx.x")
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="vthread.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b71 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b71, loop=l70, preserve_unit_loops=True, index=-1)
b72 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b72, loop=l65, preserve_unit_loops=True, index=-1)
l73, l74, l75, l76, l77, l78, l79, l80, l81, l82 = sch.get_loops(block=b72)
l83 = sch.fuse(l79, l80, l81, l82, preserve_unit_iters=True)
v84 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b72, ann_key="meta_schedule.cooperative_fetch", ann_val=v84)
b85 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b85, loop=l65, preserve_unit_loops=True, index=-1)
l86, l87, l88, l89, l90, l91, l92, l93, l94, l95 = sch.get_loops(block=b85)
l96 = sch.fuse(l92, l93, l94, l95, preserve_unit_iters=True)
v97 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b85, ann_key="meta_schedule.cooperative_fetch", ann_val=v97)
sch.compute_inline(block=b0)
v98 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v98)
2023-04-12 17:24:24 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:24:24 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 17:24:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b61c4118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59647a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b619be38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5524758)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b615a6f8)]: 512 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b596e0f8)]: 0 failure(s)
2023-04-12 17:24:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b61c4118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59647a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b619be38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5524758)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b615a6f8)]: 1024 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b596e0f8)]: 0 failure(s)
2023-04-12 17:24:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b61c4118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59647a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b619be38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5524758)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b615a6f8)]: 1536 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b596e0f8)]: 0 failure(s)
2023-04-12 17:24:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b61c4118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59647a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b619be38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5524758)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b615a6f8)]: 2048 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b596e0f8)]: 0 failure(s)
2023-04-12 17:24:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b61c4118)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b5964848)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59647a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b619be38)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5524758)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b615a6f8)]: 2560 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b596e0f8)]: 0 failure(s)
2023-04-12 17:24:27 [WARNING] [evolutionary_search.cc:719] Cannot sample enough initial population, evolutionary search failed.
