2023-03-09 21:51:04 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_conv2d_sigmoid"
2023-03-09 21:51:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("T_sigmoid"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3])
                T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3] = T.sigmoid(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32")
    

2023-03-09 21:51:04 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-03-09 21:51:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(14), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(14)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(672)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + ax0_ax1_ax2_ax3_fused // T.int64(14))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + ax0_ax1_ax2_ax3_fused % T.int64(14))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(24) + ff_3 * T.int64(8) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(7) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(24), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(48) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(24) + ax1)
                                v2, v3 = T.axis.remap("SS", [ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(T_sigmoid[v0, v1, v2, v3])
                                T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[14, 1, 2, 3, 8])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 2, 7])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2023-03-09 21:52:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:52:16 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-03-09 21:52:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 488 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 974 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:20 [INFO] [evolutionary_search.cc:723] Sampled 50 candidate(s)
2023-03-09 21:52:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 48 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:26 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 48 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 68 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:35 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 56 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:52:36 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9986  0.9982  0.9978  0.9975  0.9971  0.9959  0.9954  0.9952  0.9943  0.9925  0.9890  0.9890  0.9881  0.9867  0.9860
[17 : 32]:	0.9821  0.9819  0.9810  0.9807  0.9805  0.9786  0.9771  0.9762  0.9753  0.9742  0.9727  0.9717  0.9707  0.9706  0.9703  0.9693
[33 : 48]:	0.9667  0.9650  0.9650  0.9650  0.9646  0.9645  0.9628  0.9619  0.9611  0.9600  0.9600  0.9588  0.9573  0.9556  0.9549  0.9543
[49 : 64]:	0.9542  0.9537  0.9521  0.9519  0.9514  0.9513  0.9505  0.9483  0.9463  0.9462  0.9461  0.9456  0.9449  0.9447  0.9418  0.9418
2023-03-09 21:52:37 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-03-09 21:52:37 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #1: GFLOPs: 1.9632. Time: 19.1689 us. Best GFLOPs: 1.9632
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #2: GFLOPs: 4.2824. Time: 8.7876 us. Best GFLOPs: 4.2824
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #3: GFLOPs: 6.5270. Time: 5.7656 us. Best GFLOPs: 6.5270
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #4: GFLOPs: 6.2108. Time: 6.0591 us. Best GFLOPs: 6.5270
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #5: GFLOPs: 5.8372. Time: 6.4470 us. Best GFLOPs: 6.5270
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #6: GFLOPs: 5.8057. Time: 6.4819 us. Best GFLOPs: 6.5270
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #7: GFLOPs: 8.3525. Time: 4.5055 us. Best GFLOPs: 8.3525
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #8: GFLOPs: 6.9768. Time: 5.3938 us. Best GFLOPs: 8.3525
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #9: GFLOPs: 9.9783. Time: 3.7714 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #10: GFLOPs: 6.4807. Time: 5.8067 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #11: GFLOPs: 9.2650. Time: 4.0617 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #12: GFLOPs: 6.2108. Time: 6.0591 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #13: GFLOPs: 6.1287. Time: 6.1403 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #14: GFLOPs: 3.8257. Time: 9.8366 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #15: GFLOPs: 6.7022. Time: 5.6149 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #16: GFLOPs: 6.6637. Time: 5.6474 us. Best GFLOPs: 9.9783
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #17: GFLOPs: 10.4013. Time: 3.6180 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #18: GFLOPs: 9.2166. Time: 4.0831 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #19: GFLOPs: 6.6760. Time: 5.6369 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #20: GFLOPs: 8.3531. Time: 4.5051 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #21: GFLOPs: 9.6335. Time: 3.9064 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #22: GFLOPs: 6.9784. Time: 5.3927 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #23: GFLOPs: 3.7614. Time: 10.0047 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #24: GFLOPs: 9.2460. Time: 4.0701 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #25: GFLOPs: 8.7735. Time: 4.2893 us. Best GFLOPs: 10.4013
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #26: GFLOPs: 11.0704. Time: 3.3993 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #27: GFLOPs: 4.0297. Time: 9.3387 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #28: GFLOPs: 9.2658. Time: 4.0614 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #29: GFLOPs: 3.7426. Time: 10.0551 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #30: GFLOPs: 8.3528. Time: 4.5053 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #31: GFLOPs: 8.3544. Time: 4.5044 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #32: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":16, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(14))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(14) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 3, 112, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 1, 14])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #33: GFLOPs: 5.2851. Time: 7.1205 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #34: GFLOPs: 3.1793. Time: 11.8365 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #35: GFLOPs: 9.0838. Time: 4.1428 us. Best GFLOPs: 11.0704
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #36: GFLOPs: 11.4989. Time: 3.2727 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #37: GFLOPs: 8.6707. Time: 4.3401 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #38: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ff_3_init * T.int64(6) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(14), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(3)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ff_3 * T.int64(6) + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(2) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(6), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(6) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 56, 1, 6])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[14, 2, 1])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 56, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #39: GFLOPs: 6.2098. Time: 6.0601 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #40: GFLOPs: 8.4688. Time: 4.4436 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #41: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(56)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(7) + rc_1 * T.int64(7) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 4, 42, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[4, 1, 7])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 42, 2], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #42: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":64, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(14))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 2, 168, 1, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 7, 2])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 168, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 168, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #43: GFLOPs: 9.1568. Time: 4.1097 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #44: GFLOPs: 7.0182. Time: 5.3621 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #45: GFLOPs: 3.2090. Time: 11.7270 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #46: GFLOPs: 4.8504. Time: 7.7585 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #47: GFLOPs: 3.3927. Time: 11.0920 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #48: GFLOPs: 3.8627. Time: 9.7424 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #49: GFLOPs: 4.6878. Time: 8.0276 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #50: GFLOPs: 3.6552. Time: 10.2954 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #51: GFLOPs: 8.9852. Time: 4.1882 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #52: GFLOPs: 5.8243. Time: 6.4612 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #53: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x"):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(8), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(42) + nn_2_ff_2_yy_2_xx_2_fused + ff_3_init + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(42) + nn_2_ff_2_yy_2_xx_2_fused + ff_3 + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(7) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(42) + nn_2_ff_2_yy_2_xx_2_fused + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 8, 42, 1, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[4, 7, 1])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #54: GFLOPs: 1.0056. Time: 37.4213 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #55: GFLOPs: 4.8828. Time: 7.7070 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #56: GFLOPs: 4.0753. Time: 9.2341 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #57: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":1024, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(14))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 1, 84, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 7, 2])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l132, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l132, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #58: GFLOPs: 10.3651. Time: 3.6307 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #59: GFLOPs: 5.9315. Time: 6.3444 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #60: GFLOPs: 1.5956. Time: 23.5852 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #61: GFLOPs: 9.8850. Time: 3.8070 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #62: GFLOPs: 7.0083. Time: 5.3696 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #63: GFLOPs: 5.3380. Time: 7.0499 us. Best GFLOPs: 11.4989
2023-03-09 21:53:31 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #64: GFLOPs: 5.9757. Time: 6.2975 us. Best GFLOPs: 11.4989
2023-03-09 21:53:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-03-09 21:53:58 [INFO] [evolutionary_search.cc:715] Picked top 64 candidate(s) from database
2023-03-09 21:54:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 424 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 856 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 1283 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:03 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2023-03-09 21:54:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 55 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:14 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 49 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:20 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 60 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55a778f6e078)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55a7789a8488)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55a7789a3398)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55a778c8e078)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55a778999858)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55a7789ab5d8)]: 52 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55a7789a3618)]: 0 failure(s)
2023-03-09 21:54:31 [INFO] [evolutionary_search.cc:649] Scores of the best 36 candidates:
[1 : 16]:	0.9937  0.9937  0.9855  0.9812  0.9675  0.9632  0.9625  0.9613  0.9613  0.9561  0.9561  0.9561  0.9561  0.9558  0.9546  0.9512
[17 : 32]:	0.9487  0.9475  0.9454  0.9451  0.9446  0.9446  0.9434  0.9430  0.9410  0.9410  0.9408  0.9387  0.9387  0.9387  0.9367  0.9338
[33 : 36]:	0.9320  0.9320  0.9320  0.9300
2023-03-09 21:54:31 [INFO] [evolutionary_search.cc:727] Got 36 candidate(s) with evolutionary search
2023-03-09 21:54:32 [INFO] [evolutionary_search.cc:730] Sending 36 candidates(s) for measurement
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #65: GFLOPs: 11.1849. Time: 3.3645 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #66: GFLOPs: 11.1954. Time: 3.3614 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #67: GFLOPs: 11.1706. Time: 3.3689 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #68: GFLOPs: 11.1847. Time: 3.3646 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #69: GFLOPs: 11.1775. Time: 3.3668 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #70: GFLOPs: 11.1009. Time: 3.3900 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #71: GFLOPs: 11.1885. Time: 3.3635 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #72: GFLOPs: 11.1055. Time: 3.3886 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #73: GFLOPs: 11.1909. Time: 3.3627 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #74: GFLOPs: 11.1728. Time: 3.3682 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #75: GFLOPs: 11.1795. Time: 3.3661 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #76: GFLOPs: 11.1725. Time: 3.3683 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #77: GFLOPs: 11.1654. Time: 3.3704 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #78: GFLOPs: 11.0939. Time: 3.3921 us. Best GFLOPs: 11.4989
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #79: GFLOPs: 12.0129. Time: 3.1326 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #80: GFLOPs: 11.0987. Time: 3.3907 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #81: GFLOPs: 11.1684. Time: 3.3695 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #82: GFLOPs: 11.3715. Time: 3.3093 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #83: GFLOPs: 11.1720. Time: 3.3684 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #84: GFLOPs: 11.0955. Time: 3.3917 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #85: GFLOPs: 10.5751. Time: 3.5585 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #86: GFLOPs: 10.5759. Time: 3.5583 us. Best GFLOPs: 12.0129
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #87: GFLOPs: 12.0636. Time: 3.1195 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #88: GFLOPs: 11.1020. Time: 3.3897 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #89: GFLOPs: 12.0522. Time: 3.1224 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #90: GFLOPs: 12.0189. Time: 3.1311 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #91: GFLOPs: 9.6777. Time: 3.8885 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #92: GFLOPs: 11.1438. Time: 3.3769 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #93: GFLOPs: 11.1459. Time: 3.3763 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #94: GFLOPs: 11.1452. Time: 3.3765 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #95: GFLOPs: 8.7391. Time: 4.3062 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #96: GFLOPs: 12.0126. Time: 3.1327 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #97: GFLOPs: 10.5746. Time: 3.5587 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #98: GFLOPs: 9.7409. Time: 3.8633 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #99: GFLOPs: 10.5756. Time: 3.5584 us. Best GFLOPs: 12.0636
2023-03-09 21:54:46 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #100: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":16, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(56) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(42)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(56), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(7) + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 3, 56, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[4, 7, 1])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 56], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 56, 2], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l132, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l132, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_conv2d_sigmoid"
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("T_sigmoid"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3])
                T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3] = T.sigmoid(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32")
    

2023-04-12 17:16:41 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 17:16:41 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":1024})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(4), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(1), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(28)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":3})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(4704)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(42), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(42) + ff_3)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(28) + rc_1 * T.int64(14) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(42), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(168) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(42) + ax1)
                                v2, v3 = T.axis.remap("SS", [ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(T_sigmoid[v0, v1, v2, v3])
                                T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[4, 4, 1, 42, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 2, 14])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2023-04-12 17:17:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:17:20 [INFO] [evolutionary_search.cc:715] Picked top 100 candidate(s) from database
2023-04-12 17:17:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 781 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 1176 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:22 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2023-04-12 17:17:23 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:25 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 60 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:27 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x55f97f1ea2e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x55f97f219388)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x55f97fda8a08)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x55f97f706308)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x55f97f6fd808)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x55f97f6961d8)]: 70 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x55f97fda8d18)]: 0 failure(s)
2023-04-12 17:17:27 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9993  0.9991  0.9980  0.9970  0.9959  0.9945  0.9942  0.9938  0.9935  0.9923  0.9920  0.9906  0.9886  0.9874  0.9870
[17 : 32]:	0.9860  0.9858  0.9854  0.9843  0.9842  0.9820  0.9811  0.9804  0.9802  0.9798  0.9766  0.9750  0.9721  0.9713  0.9700  0.9695
[33 : 48]:	0.9690  0.9674  0.9662  0.9660  0.9611  0.9609  0.9604  0.9603  0.9589  0.9576  0.9552  0.9548  0.9537  0.9534  0.9524  0.9515
[49 : 64]:	0.9512  0.9502  0.9499  0.9478  0.9470  0.9469  0.9464  0.9464  0.9454  0.9439  0.9435  0.9431  0.9428  0.9427  0.9421  0.9421
2023-04-12 17:17:27 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-04-12 17:17:27 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:160] Initializing Task #3: "fused_nn_conv2d_sigmoid"
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(672), T.int64(1), T.int64(1)):
            with T.block("T_sigmoid"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3])
                T_sigmoid[v_ax0, v_ax1, v_ax2, v_ax3] = T.sigmoid(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32")
    

2023-04-12 17:23:50 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 17:23:50 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":1024})
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(28), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(2), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(28)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused)
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(672)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(24) + ax0_ax1_ax2_ax3_fused // T.int64(28))
                                    v1 = T.axis.spatial(T.int64(28), ax0_ax1_ax2_ax3_fused % T.int64(28))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":2})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(28), T.int64(1), T.int64(1), T.int64(1), T.int64(3), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(12) + ff_3 * T.int64(3) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                    v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                    v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(28) + rc_1 * T.int64(28) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(12), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(24) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(12) + ax1)
                                v2, v3 = T.axis.remap("SS", [ax2, ax3])
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(T_sigmoid[v0, v1, v2, v3])
                                T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[28, 1, 2, 4, 3])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[1, 1, 28])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
2023-04-12 17:24:27 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:24:28 [INFO] [evolutionary_search.cc:715] Picked top 100 candidate(s) from database
2023-04-12 17:24:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 391 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 784 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 1178 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:30 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2023-04-12 17:24:31 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 54 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:32 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:33 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 62 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:24:35 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9998  0.9992  0.9989  0.9986  0.9977  0.9977  0.9975  0.9974  0.9959  0.9957  0.9944  0.9942  0.9936  0.9916  0.9905  0.9881
[17 : 32]:	0.9860  0.9856  0.9853  0.9852  0.9847  0.9845  0.9841  0.9839  0.9831  0.9829  0.9828  0.9825  0.9818  0.9816  0.9811  0.9810
[33 : 48]:	0.9804  0.9795  0.9795  0.9791  0.9791  0.9790  0.9789  0.9773  0.9750  0.9745  0.9742  0.9739  0.9734  0.9734  0.9723  0.9714
[49 : 64]:	0.9714  0.9706  0.9680  0.9679  0.9677  0.9677  0.9676  0.9663  0.9658  0.9647  0.9646  0.9620  0.9612  0.9588  0.9583  0.9573
2023-04-12 17:24:35 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2023-04-12 17:24:35 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #1: GFLOPs: 8.1067. Time: 4.6421 us. Best GFLOPs: 8.1067
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #2: GFLOPs: 8.9448. Time: 4.2071 us. Best GFLOPs: 8.9448
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #3: GFLOPs: 0.8711. Time: 43.1981 us. Best GFLOPs: 8.9448
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #4: GFLOPs: 12.1267. Time: 3.1032 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #5: GFLOPs: 12.0669. Time: 3.1186 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #6: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":1024, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(84), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(8), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(7) + rc_1 * T.int64(7) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 84, 8, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[4, 1, 7])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 84], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 84, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l132, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l132, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #7: GFLOPs: 2.4626. Time: 15.2812 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #8: GFLOPs: 10.9762. Time: 3.4285 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #9: GFLOPs: 6.9804. Time: 5.3911 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #10: GFLOPs: 10.9713. Time: 3.4300 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #11: GFLOPs: 6.9818. Time: 5.3900 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #12: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":64, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init * T.int64(2) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(14))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(336) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(168), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(672) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3 * T.int64(2) + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 168, 2, 2])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 7, 2])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 168, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 168, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #13: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":512, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3_init * T.int64(4) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(4), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1 < T.int64(7))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(14)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(7))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(7) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(7))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ff_3 * T.int64(4) + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(7) + rc_1 * T.int64(7) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(8) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 1, 42, 2, 4])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[4, 1, 7])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 42], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l132, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l132, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #14: GFLOPs: 1.1639. Time: 32.3323 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #15: GFLOPs: 2.9089. Time: 12.9368 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #16: GFLOPs: 4.4633. Time: 8.4315 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #17: GFLOPs: 7.4043. Time: 5.0824 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #18: GFLOPs: 9.3497. Time: 4.0250 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #19: GFLOPs: 3.5982. Time: 10.4584 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #20: GFLOPs: 8.7593. Time: 4.2963 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #21: GFLOPs: 7.8149. Time: 4.8154 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #22: GFLOPs: 10.7766. Time: 3.4920 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #23: GFLOPs: 10.8307. Time: 3.4746 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #24: GFLOPs: 6.4513. Time: 5.8333 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #25: GFLOPs: 10.7054. Time: 3.5152 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #26: GFLOPs: 4.1963. Time: 8.9679 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #27: GFLOPs: 7.8373. Time: 4.8016 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #28: GFLOPs: 2.0357. Time: 18.4862 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #29: GFLOPs: 5.7791. Time: 6.5118 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #30: GFLOPs: 6.8910. Time: 5.4610 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #31: GFLOPs: 8.9230. Time: 4.2174 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #32: Error in building:
LocalBuilder: An exception occurred
Traceback (most recent call last):
  File "/home/xiachunwei/Software/tvm/python/tvm/exec/popen_worker.py", line 87, in main
    result = fn(*args, **kwargs)
  File "/home/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 165, in <lambda>
    lambda x: _worker_func(*x),
  File "/home/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 231, in _worker_func
    rt_mod: Module = f_build(mod, target, _deserialize_params(params))
  File "/home/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
tvm._ffi.base.TVMError: Traceback (most recent call last):
  1: TVMFuncCall
  0: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<TVMFuncCreateFromCFunc::{lambda(tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)#2}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  File "/home/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 81, in cfun
    rv = local_pyfunc(*pyargs)
  File "/home/xiachunwei/Software/tvm/python/tvm/meta_schedule/builder/local_builder.py", line 261, in default_build
    return tvm_build(mod, target=target)
  File "/home/xiachunwei/Software/tvm/python/tvm/driver/build_module.py", line 281, in build
    rt_mod_host = _driver_ffi.tir_to_runtime(annotated_mods, target_host)
  File "/home/xiachunwei/Software/tvm/python/tvm/_ffi/_ctypes/packed_func.py", line 237, in __call__
    raise get_last_ffi_error()
  230: TVMFuncCall
  229: tvm::runtime::PackedFuncObj::Extractor<tvm::runtime::PackedFuncSubObj<tvm::runtime::TypedPackedFunc<tvm::runtime::Module (tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)>::AssignTypedLambda<tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}>(tvm::{lambda(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target)#6}, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >)::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}> >::Call(tvm::runtime::PackedFuncObj const*, tvm::runtime::TVMArgs, tvm::runtime::TVMRetValue*)
  228: tvm::TIRToRuntime(tvm::runtime::Map<tvm::Target, tvm::IRModule, void, void> const&, tvm::Target const&)
  227: tvm::SplitMixedModule(tvm::IRModule, tvm::Target const&, tvm::Target const&)
  226: tvm::ApplyPasses(tvm::IRModule, tvm::transform::Sequential)
  225: tvm::transform::Pass::operator()(tvm::IRModule) const
  224: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  223: tvm::transform::SequentialNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  222: tvm::transform::Pass::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  221: tvm::tir::transform::PrimFuncPassNode::operator()(tvm::IRModule, tvm::transform::PassContext const&) const
  220: _ZN3tvm7runtime13PackedFun
  219: tvm::runtime::TypedPackedFunc<tvm::tir::PrimFunc (tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)>::AssignTypedLambda<tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1}>(tvm::tir::transform::LowerTVMBuiltin()::{lambda(tvm::tir::PrimFunc, tvm::IRModule, tvm::transform::PassContext)#1})::{lambda(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*)#1}::operator()(tvm::runtime::TVMArgs const&, tvm::runtime::TVMRetValue*) const
  218: tvm::tir::BuiltinLower::VisitBodyAndRealizeAlloca(tvm::tir::Stmt)
  217: tvm::tir::BuiltinLower::GetMaxStack(tvm::tir::Stmt)
  216: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  215: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  214: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  213: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  212: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  211: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  210: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  209: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  208: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  207: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  206: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  205: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  204: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  203: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  202: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  201: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  200: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  199: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  198: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  197: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  196: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  195: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  194: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  193: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  192: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  191: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  190: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  189: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  188: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  187: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  186: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  185: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  184: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  183: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  182: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AttrStmtNode const*)
  181: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  180: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  179: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  178: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  177: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  176: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  175: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  174: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  173: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  172: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  171: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  170: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  169: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  168: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  167: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  166: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  165: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  164: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  163: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  162: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AttrStmtNode const*)
  161: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  160: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  159: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  158: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  157: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  156: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  155: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  154: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  153: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  152: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  151: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  150: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  149: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  148: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  147: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  146: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AttrStmtNode const*)
  145: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  144: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  143: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  142: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  141: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  140: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  139: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  138: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  137: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  136: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  135: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  134: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  133: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  132: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  131: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  130: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  129: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  128: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  127: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  126: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  125: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  124: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  123: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  122: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  121: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  120: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  119: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  118: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  117: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  116: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  115: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  114: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  113: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  112: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  111: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  110: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  109: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  108: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  107: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  106: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  105: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  104: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  103: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  102: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  101: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  100: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  99: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::SeqStmtNode const*)
  98: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  97: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  96: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  95: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  94: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  93: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  92: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  91: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  90: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  89: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  88: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  87: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  86: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  85: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  84: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  83: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  82: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  81: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  80: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  79: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  78: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  77: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  76: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  75: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  74: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  73: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  72: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  71: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  70: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  69: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  68: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::SeqStmtNode const*)
  67: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  66: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  65: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  64: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  63: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  62: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  61: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  60: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  59: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  58: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  57: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  56: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  55: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  54: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  53: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  52: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  51: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  50: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  49: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  48: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  47: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  46: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  45: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  44: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  43: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  42: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  41: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  40: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  39: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  38: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  37: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  36: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  35: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  34: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::SeqStmtNode const*)
  33: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  32: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  31: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  30: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  29: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  28: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  27: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  26: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  25: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  24: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AssertStmtNode const*)
  23: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  22: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  21: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::SeqStmtNode const*)
  20: tvm::runtime::ObjectPtr<tvm::runtime::Object> tvm::runtime::Array<tvm::tir::Stmt, void>::MapHelper<tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1}, tvm::tir::Stmt>(tvm::runtime::ObjectPtr<tvm::runtime::Object>, tvm::tir::StmtMutator::Internal::Mutate(tvm::tir::StmtMutator*, tvm::runtime::Array<tvm::tir::Stmt, void> const&)::{lambda(tvm::tir::Stmt const&)#1})
  19: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  18: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  17: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::AttrStmtNode const*)
  16: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::AttrStmtNode const*)
  15: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  14: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  13: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  12: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  11: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  10: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7r
  9: tvm::tir::BuiltinLower::VisitStmt_(tvm::tir::LetStmtNode const*)
  8: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::LetStmtNode const*)
  7: tvm::tir::BuiltinLower::VisitStmt(tvm::tir::Stmt const&)
  6: _ZZN3tvm3tir11StmtFunctorIFNS0_4StmtERKS2_EE10InitVTableEvENUlRKNS_7runt
  5: tvm::tir::StmtMutator::VisitStmt_(tvm::tir::EvaluateNode const*)
  4: tvm::tir::StmtExprMutator::VisitExpr(tvm::PrimExpr const&)
  3: _ZZN3tvm3tir11ExprFunctorIFNS_8PrimExprERKS2_EE10InitVTableEvENUlRKNS
  2: non-virtual thunk to tvm::tir::BuiltinLower::VisitExpr_(tvm::tir::CallNode const*)
  1: tvm::tir::BuiltinLower::MakeCallPacked(tvm::tir::CallNode const*, bool)
  0: tvm::tir::APIType(tvm::runtime::DataType)
  File "/home/xiachunwei/Software/tvm/src/tir/transforms/ir_utils.h", line 154
TVMError: 
---------------------------------------------------------------
An error occurred during the execution of TVM.
For more information, please see: https://tvm.apache.org/docs/errors.html
---------------------------------------------------------------

  Check failed: t.lanes() == 1 (4 vs. 1) : Cannot pass vector type through packed API.

# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(2), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":1024, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(14), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(42) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(2))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(84) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(4)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(42), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(2))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(2) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(168) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(2) + rc_1 * T.int64(2) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_0_ff_0_yy_0_xx_0_fused * T.int64(336) + nn_1_ff_1_yy_1_xx_1_fused * T.int64(168) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(4) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[2, 2, 42, 4, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[14, 1, 2])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 42, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 42, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #33: GFLOPs: 1.8762. Time: 20.0579 us. Best GFLOPs: 12.1267
2023-04-12 17:25:06 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #34: GFLOPs: 2.8974. Time: 12.9881 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #35: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":64, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(14) + ff_3_init * T.int64(14) + ff_4_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                with T.block("pad_temp_shared"):
                                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1 < T.int64(14))
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(48) + ax0_ax1_ax2_ax3_fused_1))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(49)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(48), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(192) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(14) + ff_3 * T.int64(14) + ff_4)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(7) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(14), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_2_ff_2_yy_2_xx_2_fused * T.int64(14) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 1, 48, 1, 14])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 2, 7])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108 = sch.split(loop=l106, factors=[None, 48], preserve_unit_iters=True)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l109, l110, l111, l112, l113, l114, l115 = sch.get_loops(block=b86)
l116, l117, l118 = sch.split(loop=l115, factors=[None, 48, 4], preserve_unit_iters=True)
sch.vectorize(loop=l118)
sch.bind(loop=l117, thread_axis="threadIdx.x")
b119 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b119, ann_key="meta_schedule.unroll_explicit")
b120, b121, b122, b123 = sch.get_child_blocks(b119)
l124, l125, l126, l127, l128, l129, l130, l131 = sch.get_loops(block=b120)
sch.annotate(block_or_loop=l124, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l124, ann_key="pragma_unroll_explicit", ann_val=1)
l132, l133, l134, l135, l136, l137, l138, l139, l140 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l132, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l132, ann_key="pragma_unroll_explicit", ann_val=1)
l141, l142, l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l141, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l141, ann_key="pragma_unroll_explicit", ann_val=1)
l161, l162, l163, l164, l165, l166, l167 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l161, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l161, ann_key="pragma_unroll_explicit", ann_val=1)
b168 = sch.get_block(name="conv2d_nchw", func_name="main")
l169, l170, l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188 = sch.get_loops(block=b168)
b189 = sch.decompose_reduction(block=b168, loop=l172)
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #36: GFLOPs: 6.8493. Time: 5.4943 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #37: GFLOPs: 11.1488. Time: 3.3754 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #38: GFLOPs: 4.6029. Time: 8.1758 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #39: GFLOPs: 3.2536. Time: 11.5664 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #40: GFLOPs: 11.9676. Time: 3.1445 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #41: GFLOPs: 4.1890. Time: 8.9835 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:121] [Task #3: fused_nn_conv2d_sigmoid] Trial #42: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(28), T.int64(1), T.int64(1)), "float32"], p1: T.Buffer[(T.int64(672), T.int64(28), T.int64(1), T.int64(1)), "float32"], T_sigmoid: T.Buffer[(T.int64(1), T.int64(672), T.int64(1), T.int64(1)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(672), T.int64(1), T.int64(1)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(672), T.int64(28), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(1), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":16, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(3), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(672), ff_4_init + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(1), yy_4_init + yy_3_init)
                            v_xx = T.axis.spatial(T.int64(1), xx_4_init + xx_3_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(2), T.int64(1), T.int64(1)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(112) + ax0_ax1_ax2_ax3_fused_1) * T.int64(2) + ax0_ax1_ax2_ax3_fused_2 < T.int64(14))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(224) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(21)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(112), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(4)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(672), (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) // T.int64(14))
                                        v1 = T.axis.spatial(T.int64(28), rc_0 * T.int64(14) + (ax0_ax1_ax2_ax3_fused_0 * T.int64(448) + ax0_ax1_ax2_ax3_fused_1 * T.int64(4) + ax0_ax1_ax2_ax3_fused_2) % T.int64(14))
                                        v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(14), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(672), ff_4 + nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ff_3)
                                v_yy = T.axis.spatial(T.int64(1), yy_4 + yy_3)
                                v_xx = T.axis.spatial(T.int64(1), xx_4 + xx_3)
                                v_rc = T.axis.reduce(T.int64(28), rc_0 * T.int64(14) + rc_1 * T.int64(14) + rc_2)
                                v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":T.int64(1024), "meta_schedule.thread_extent_low_inclusive":T.int64(32), "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy + v_ry, v_xx + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(2), T.int64(1), T.int64(1)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(672), nn_1_ff_1_yy_1_xx_1_fused * T.int64(224) + nn_2_ff_2_yy_2_xx_2_fused * T.int64(2) + ax1)
                            v2, v3 = T.axis.remap("SS", [ax2, ax3])
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(T_sigmoid[v0, v1, v2, v3])
                            T_sigmoid[v0, v1, v2, v3] = T.sigmoid(conv2d_nchw_local[v0, v1, v2, v3], dtype="float32")
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_sigmoid", func_name="main")
b3 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l4, l5, l6, l7, l8, l9, l10 = sch.get_loops(block=b1)
v11, v12, v13, v14, v15 = sch.sample_perfect_tile(loop=l4, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l16, l17, l18, l19, l20 = sch.split(loop=l4, factors=[v11, v12, v13, v14, v15], preserve_unit_iters=True)
v21, v22, v23, v24, v25 = sch.sample_perfect_tile(loop=l5, n=5, max_innermost_factor=64, decision=[1, 3, 112, 2, 1])
l26, l27, l28, l29, l30 = sch.split(loop=l5, factors=[v21, v22, v23, v24, v25], preserve_unit_iters=True)
v31, v32, v33, v34, v35 = sch.sample_perfect_tile(loop=l6, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l36, l37, l38, l39, l40 = sch.split(loop=l6, factors=[v31, v32, v33, v34, v35], preserve_unit_iters=True)
v41, v42, v43, v44, v45 = sch.sample_perfect_tile(loop=l7, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l46, l47, l48, l49, l50 = sch.split(loop=l7, factors=[v41, v42, v43, v44, v45], preserve_unit_iters=True)
v51, v52, v53 = sch.sample_perfect_tile(loop=l8, n=3, max_innermost_factor=64, decision=[2, 1, 14])
l54, l55, l56 = sch.split(loop=l8, factors=[v51, v52, v53], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l9, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l60, l61, l62 = sch.split(loop=l9, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l10, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l66, l67, l68 = sch.split(loop=l10, factors=[v63, v64, v65], preserve_unit_iters=True)
sch.reorder(l16, l26, l36, l46, l17, l27, l37, l47, l18, l28, l38, l48, l54, l60, l66, l55, l61, l67, l19, l29, l39, l49, l56, l62, l68, l20, l30, l40, l50)
l69 = sch.fuse(l16, l26, l36, l46, preserve_unit_iters=True)
sch.bind(loop=l69, thread_axis="blockIdx.x")
l70 = sch.fuse(l17, l27, l37, l47, preserve_unit_iters=True)
sch.bind(loop=l70, thread_axis="vthread.x")
l71 = sch.fuse(l18, l28, l38, l48, preserve_unit_iters=True)
sch.bind(loop=l71, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b72 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b72, loop=l71, preserve_unit_loops=True, index=-1)
b73 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b73, loop=l66, preserve_unit_loops=True, index=-1)
l74, l75, l76, l77, l78, l79, l80, l81, l82, l83 = sch.get_loops(block=b73)
l84 = sch.fuse(l80, l81, l82, l83, preserve_unit_iters=True)
v85 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch", ann_val=v85)
b86 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b86, loop=l66, preserve_unit_loops=True, index=-1)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b86)
l97 = sch.fuse(l93, l94, l95, l96, preserve_unit_iters=True)
v98 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch", ann_val=v98)
sch.reverse_compute_inline(block=b2)
sch.compute_inline(block=b0)
v99 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b3, ann_key="meta_schedule.unroll_explicit", ann_val=v99)
sch.enter_postproc()
sch.unannotate(block_or_loop=b73, ann_key="meta_schedule.cooperative_fetch")
l100, l101, l102, l103, l104, l105, l106 = sch.get_loops(block=b73)
l107, l108, l109 = sch.split(loop=l106, factors=[None, 112, 2], preserve_unit_iters=True)
sch.vectorize(loop=l109)
sch.bind(loop=l108, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b86, ann_key="meta_schedule.cooperative_fetch")
l110, l111, l112, l113, l114, l115, l116 = sch.get_loops(block=b86)
l117, l118, l119 = sch.split(loop=l116, factors=[None, 112, 4], preserve_unit_iters=True)
sch.vectorize(loop=l119)
sch.bind(loop=l118, thread_axis="threadIdx.x")
b120 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b120, ann_key="meta_schedule.unroll_explicit")
b121, b122, b123, b124 = sch.get_child_blocks(b120)
l125, l126, l127, l128, l129, l130, l131, l132, l133 = sch.get_loops(block=b121)
sch.annotate(block_or_loop=l125, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l125, ann_key="pragma_unroll_explicit", ann_val=1)
l134, l135, l136, l137, l138, l139, l140, l141, l142 = sch.get_loops(block=b122)
sch.annotate(block_or_loop=l134, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l134, ann_key="pragma_unroll_explicit", ann_val=1)
l143, l144, l145, l146, l147, l148, l149, l150, l151, l152, l153, l154, l155, l156, l157, l158, l159, l160, l161, l162 = sch.get_loops(block=b123)
sch.annotate(block_or_loop=l143, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l143, ann_key="pragma_unroll_explicit", ann_val=1)
l163, l164, l165, l166, l167, l168, l169 = sch.get_loops(block=b124)
sch.annotate(block_or_loop=l163, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l163, ann_key="pragma_unroll_explicit", ann_val=1)
b170 = sch.get_block(name="conv2d_nchw", func_name="main")
l171, l172, l173, l174, l175, l176, l177, l178, l179, l180, l181, l182, l183, l184, l185, l186, l187, l188, l189, l190 = sch.get_loops(block=b170)
b191 = sch.decompose_reduction(block=b170, loop=l174)
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #43: GFLOPs: 10.7430. Time: 3.5029 us. Best GFLOPs: 12.1267
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #44: GFLOPs: 12.1981. Time: 3.0851 us. Best GFLOPs: 12.1981
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #45: GFLOPs: 11.7556. Time: 3.2012 us. Best GFLOPs: 12.1981
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #46: GFLOPs: 7.8221. Time: 4.8110 us. Best GFLOPs: 12.1981
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #47: GFLOPs: 12.3478. Time: 3.0477 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #48: GFLOPs: 11.7524. Time: 3.2021 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #49: GFLOPs: 3.2026. Time: 11.7505 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #50: GFLOPs: 10.6144. Time: 3.5454 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #51: GFLOPs: 11.7502. Time: 3.2027 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #52: GFLOPs: 8.9823. Time: 4.1896 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #53: GFLOPs: 6.5467. Time: 5.7483 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #54: GFLOPs: 5.2128. Time: 7.2192 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #55: GFLOPs: 6.5312. Time: 5.7619 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #56: GFLOPs: 3.9945. Time: 9.4209 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #57: GFLOPs: 3.4350. Time: 10.9553 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #58: GFLOPs: 7.2177. Time: 5.2138 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #59: GFLOPs: 6.3180. Time: 5.9563 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #60: GFLOPs: 8.5177. Time: 4.4181 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #61: GFLOPs: 2.3348. Time: 16.1177 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #62: GFLOPs: 2.9698. Time: 12.6716 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #63: GFLOPs: 6.7563. Time: 5.5699 us. Best GFLOPs: 12.3478
2023-04-12 17:25:07 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #64: GFLOPs: 10.6203. Time: 3.5434 us. Best GFLOPs: 12.3478
2023-04-12 17:25:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 17:25:25 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2023-04-12 17:25:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 386 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 772 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 1169 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:27 [INFO] [evolutionary_search.cc:723] Sampled 61 candidate(s)
2023-04-12 17:25:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 50 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 57 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:31 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 61 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:33 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x5564b596d5c8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x5564b596d5e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x5564b59661b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x5564b61e7c88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x5564b5552fb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x5564b5970c48)]: 72 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x5564b59692f8)]: 0 failure(s)
2023-04-12 17:25:34 [INFO] [evolutionary_search.cc:649] Scores of the best 36 candidates:
[1 : 16]:	1.0043  1.0025  1.0023  0.9888  0.9888  0.9884  0.9884  0.9884  0.9884  0.9884  0.9884  0.9884  0.9884  0.9884  0.9884  0.9880
[17 : 32]:	0.9869  0.9869  0.9865  0.9865  0.9865  0.9865  0.9865  0.9865  0.9865  0.9865  0.9865  0.9855  0.9855  0.9855  0.9787  0.9783
[33 : 36]:	0.9783  0.9783  0.9778  0.9778
2023-04-12 17:25:34 [INFO] [evolutionary_search.cc:727] Got 36 candidate(s) with evolutionary search
2023-04-12 17:25:34 [INFO] [evolutionary_search.cc:730] Sending 36 candidates(s) for measurement
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #65: GFLOPs: 11.5162. Time: 3.2677 us. Best GFLOPs: 12.3478
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #66: GFLOPs: 11.7377. Time: 3.2061 us. Best GFLOPs: 12.3478
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #67: GFLOPs: 11.2621. Time: 3.3415 us. Best GFLOPs: 12.3478
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #68: GFLOPs: 12.3549. Time: 3.0459 us. Best GFLOPs: 12.3549
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #69: GFLOPs: 11.2674. Time: 3.3399 us. Best GFLOPs: 12.3549
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #70: GFLOPs: 11.2682. Time: 3.3397 us. Best GFLOPs: 12.3549
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #71: GFLOPs: 12.3560. Time: 3.0456 us. Best GFLOPs: 12.3560
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #72: GFLOPs: 12.3560. Time: 3.0456 us. Best GFLOPs: 12.3560
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #73: GFLOPs: 11.2661. Time: 3.3403 us. Best GFLOPs: 12.3560
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #74: GFLOPs: 12.3561. Time: 3.0456 us. Best GFLOPs: 12.3561
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #75: GFLOPs: 12.3563. Time: 3.0456 us. Best GFLOPs: 12.3563
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #76: GFLOPs: 12.3562. Time: 3.0456 us. Best GFLOPs: 12.3563
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #77: GFLOPs: 12.3561. Time: 3.0456 us. Best GFLOPs: 12.3563
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #78: GFLOPs: 12.3561. Time: 3.0456 us. Best GFLOPs: 12.3563
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #79: GFLOPs: 11.2648. Time: 3.3407 us. Best GFLOPs: 12.3563
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #80: GFLOPs: 12.5965. Time: 2.9875 us. Best GFLOPs: 12.5965
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #81: GFLOPs: 11.2549. Time: 3.3436 us. Best GFLOPs: 12.5965
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #82: GFLOPs: 12.3580. Time: 3.0452 us. Best GFLOPs: 12.5965
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #83: GFLOPs: 12.6186. Time: 2.9823 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #84: GFLOPs: 12.6111. Time: 2.9840 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #85: GFLOPs: 12.6166. Time: 2.9827 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #86: GFLOPs: 12.6170. Time: 2.9826 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #87: GFLOPs: 12.5257. Time: 3.0044 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #88: GFLOPs: 12.1615. Time: 3.0944 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #89: GFLOPs: 12.5241. Time: 3.0048 us. Best GFLOPs: 12.6186
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #90: GFLOPs: 12.6205. Time: 2.9818 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #91: GFLOPs: 12.6197. Time: 2.9820 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #92: GFLOPs: 11.3117. Time: 3.3268 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #93: GFLOPs: 12.3596. Time: 3.0447 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #94: GFLOPs: 12.3618. Time: 3.0442 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #95: GFLOPs: 12.3492. Time: 3.0473 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #96: GFLOPs: 12.3565. Time: 3.0455 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #97: GFLOPs: 12.3545. Time: 3.0460 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #98: GFLOPs: 12.3481. Time: 3.0476 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #99: GFLOPs: 12.3934. Time: 3.0364 us. Best GFLOPs: 12.6205
2023-04-12 17:25:49 [INFO] [task_scheduler.cc:131] [Task #3: fused_nn_conv2d_sigmoid] Trial #100: GFLOPs: 8.9813. Time: 4.1900 us. Best GFLOPs: 12.6205
