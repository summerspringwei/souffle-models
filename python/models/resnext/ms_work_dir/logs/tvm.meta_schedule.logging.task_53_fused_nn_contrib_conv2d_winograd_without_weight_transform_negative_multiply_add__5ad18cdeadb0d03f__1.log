2023-04-12 18:56:04 [INFO] [task_scheduler.cc:160] Initializing Task #53: "fused_nn_contrib_conv2d_winograd_without_weight_transform_negative_multiply_add__5ad18cdeadb0d03f__1"
2023-04-12 18:56:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(8), T.int64(28), T.int64(28)), "float32"], p1: T.Buffer[(T.int64(4), T.int64(4), T.int64(8), T.int64(8)), "float32"], p2: T.Buffer[T.int64(8), "float32"], p3: T.Buffer[T.int64(8), "float32"], p4: T.Buffer[T.int64(8), "float32"], T_relu: T.Buffer[(T.int64(1), T.int64(8), T.int64(28), T.int64(28)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True, "layout_free_buffers": [1]})
        # body
        # with T.block("root")
        data_pad = T.alloc_buffer([T.int64(1), T.int64(8), T.int64(30), T.int64(30)], dtype="float32")
        input_tile = T.alloc_buffer([T.int64(8), T.int64(196), T.int64(4), T.int64(4)], dtype="float32")
        B = T.alloc_buffer([T.int64(4), T.int64(4)], dtype="float32")
        data_pack = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32")
        bgemm = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32")
        A = T.alloc_buffer([T.int64(4), T.int64(2)], dtype="float32")
        inverse = T.alloc_buffer([T.int64(8), T.int64(196), T.int64(2), T.int64(2)], dtype="float32")
        conv2d_winograd = T.alloc_buffer([T.int64(1), T.int64(8), T.int64(28), T.int64(28)], dtype="float32")
        T_negative = T.alloc_buffer([T.int64(8)], dtype="float32")
        T_multiply = T.alloc_buffer([T.int64(8)], dtype="float32")
        T_add = T.alloc_buffer([T.int64(8)], dtype="float32")
        T_expand_dims = T.alloc_buffer([T.int64(8), T.int64(1), T.int64(1)], dtype="float32")
        T_expand_dims_1 = T.alloc_buffer([T.int64(1), T.int64(8), T.int64(1), T.int64(1)], dtype="float32")
        T_add_1 = T.alloc_buffer([T.int64(1), T.int64(8), T.int64(28), T.int64(28)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(8), T.int64(30), T.int64(30)):
            with T.block("data_pad"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)])
                T.writes(data_pad[v_i0, v_i1, v_i2, v_i3])
                data_pad[v_i0, v_i1, v_i2, v_i3] = T.if_then_else(T.int64(1) <= v_i2 and v_i2 < T.int64(29) and T.int64(1) <= v_i3 and v_i3 < T.int64(29), p0[v_i0, v_i1, v_i2 - T.int64(1), v_i3 - T.int64(1)], T.float32(0), dtype="float32")
        for ci, p, eps, nu in T.grid(T.int64(8), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("input_tile"):
                v_ci, v_p, v_eps, v_nu = T.axis.remap("SSSS", [ci, p, eps, nu])
                T.reads(data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu])
                T.writes(input_tile[v_ci, v_p, v_eps, v_nu])
                T.block_attr({"schedule_rule":"None"})
                input_tile[v_ci, v_p, v_eps, v_nu] = data_pad[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps, v_p % T.int64(14) * T.int64(2) + v_nu]
        for i, j in T.grid(T.int64(4), T.int64(4)):
            with T.block("B"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(B[v_i, v_j])
                T.block_attr({"schedule_rule":"None"})
                B[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
        for eps, nu, ci, p, r_a, r_b in T.grid(T.int64(4), T.int64(4), T.int64(8), T.int64(196), T.int64(4), T.int64(4)):
            with T.block("data_pack"):
                v_eps, v_nu, v_ci, v_p, v_r_a, v_r_b = T.axis.remap("SSSSRR", [eps, nu, ci, p, r_a, r_b])
                T.reads(input_tile[v_ci, v_p, v_r_a, v_r_b], B[T.min(v_r_a, v_r_b) : T.max(v_r_a, v_r_b) + T.int64(1), T.min(v_eps, v_nu) : T.max(v_eps, v_nu) + T.int64(1)])
                T.writes(data_pack[v_eps, v_nu, v_ci, v_p])
                T.block_attr({"schedule_rule":"conv2d_nchw_winograd_data_pack"})
                with T.init():
                    data_pack[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                data_pack[v_eps, v_nu, v_ci, v_p] = data_pack[v_eps, v_nu, v_ci, v_p] + input_tile[v_ci, v_p, v_r_a, v_r_b] * B[v_r_a, v_eps] * B[v_r_b, v_nu]
        for eps, nu, co, p, ci in T.grid(T.int64(4), T.int64(4), T.int64(8), T.int64(196), T.int64(8)):
            with T.block("bgemm"):
                v_eps, v_nu, v_co, v_p, v_ci = T.axis.remap("SSSSR", [eps, nu, co, p, ci])
                T.reads(data_pack[v_eps, v_nu, v_ci, v_p], p1[v_eps, v_nu, v_ci, v_co])
                T.writes(bgemm[v_eps, v_nu, v_co, v_p])
                with T.init():
                    bgemm[v_eps, v_nu, v_co, v_p] = T.float32(0)
                bgemm[v_eps, v_nu, v_co, v_p] = bgemm[v_eps, v_nu, v_co, v_p] + data_pack[v_eps, v_nu, v_ci, v_p] * p1[v_eps, v_nu, v_ci, v_co]
        for i, j in T.grid(T.int64(4), T.int64(2)):
            with T.block("A"):
                v_i, v_j = T.axis.remap("SS", [i, j])
                T.reads()
                T.writes(A[v_i, v_j])
                T.block_attr({"schedule_rule":"None"})
                A[v_i, v_j] = T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(3) and v_j % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(2) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_i % T.int64(4) == T.int64(1) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_i % T.int64(4) == T.int64(0) and v_j % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
        for co, p, vh, vw, r_a, r_b in T.grid(T.int64(8), T.int64(196), T.int64(2), T.int64(2), T.int64(4), T.int64(4)):
            with T.block("inverse"):
                v_co, v_p, v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSSSRR", [co, p, vh, vw, r_a, r_b])
                T.reads(bgemm[v_r_a, v_r_b, v_co, v_p], A[T.min(v_r_a, v_r_b) : T.max(v_r_a, v_r_b) + T.int64(1), T.min(v_vh, v_vw) : T.max(v_vh, v_vw) + T.int64(1)])
                T.writes(inverse[v_co, v_p, v_vh, v_vw])
                T.block_attr({"schedule_rule":"conv2d_nchw_winograd_inverse"})
                with T.init():
                    inverse[v_co, v_p, v_vh, v_vw] = T.float32(0)
                inverse[v_co, v_p, v_vh, v_vw] = inverse[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * A[v_r_a, v_vh] * A[v_r_b, v_vw]
        for n, co, h, w in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
            with T.block("conv2d_winograd"):
                v_n, v_co, v_h, v_w = T.axis.remap("SSSS", [n, co, h, w])
                T.reads(inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)])
                T.writes(conv2d_winograd[v_n, v_co, v_h, v_w])
                conv2d_winograd[v_n, v_co, v_h, v_w] = inverse[v_co, v_n * T.int64(196) + v_h // T.int64(2) * T.int64(14) + v_w // T.int64(2), v_h % T.int64(2), v_w % T.int64(2)]
        for ax0 in T.serial(T.int64(8)):
            with T.block("T_negative"):
                v_ax0 = T.axis.spatial(T.int64(8), ax0)
                T.reads(p2[v_ax0])
                T.writes(T_negative[v_ax0])
                T_negative[v_ax0] = T.float32(0) - p2[v_ax0]
        for ax0 in T.serial(T.int64(8)):
            with T.block("T_multiply"):
                v_ax0 = T.axis.spatial(T.int64(8), ax0)
                T.reads(T_negative[v_ax0], p3[v_ax0])
                T.writes(T_multiply[v_ax0])
                T_multiply[v_ax0] = T_negative[v_ax0] * p3[v_ax0]
        for ax0 in T.serial(T.int64(8)):
            with T.block("T_add"):
                v_ax0 = T.axis.spatial(T.int64(8), ax0)
                T.reads(T_multiply[v_ax0], p4[v_ax0])
                T.writes(T_add[v_ax0])
                T_add[v_ax0] = T_multiply[v_ax0] + p4[v_ax0]
        for ax0, ax1, ax2 in T.grid(T.int64(8), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(T_add[v_ax0])
                T.writes(T_expand_dims[v_ax0, v_ax1, v_ax2])
                T_expand_dims[v_ax0, v_ax1, v_ax2] = T_add[v_ax0]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_expand_dims[v_ax1, v_ax2, v_ax3])
                T.writes(T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_expand_dims[v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3], T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_winograd[v_ax0, v_ax1, v_ax2, v_ax3] + T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(8), T.int64(28), T.int64(28)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
    

2023-04-12 18:56:04 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(8), T.int64(28), T.int64(28)), "float32"], p1: T.Buffer[(T.int64(4), T.int64(4), T.int64(8), T.int64(8)), "float32"], p2: T.Buffer[T.int64(8), "float32"], p3: T.Buffer[T.int64(8), "float32"], p4: T.Buffer[T.int64(8), "float32"], T_relu: T.Buffer[(T.int64(1), T.int64(8), T.int64(28), T.int64(28)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True, "layout_free_buffers": [1]})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":512})
            input_tile_local = T.alloc_buffer([T.int64(8), T.int64(196), T.int64(4), T.int64(4)], dtype="float32", scope="local")
            data_pack = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32")
            bgemm = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32")
            inverse_local = T.alloc_buffer([T.int64(8), T.int64(196), T.int64(2), T.int64(2)], dtype="float32", scope="local")
            data_pack_local = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32", scope="local")
            bgemm_local = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32", scope="local")
            data_pack_shared = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(196)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(4), T.int64(4), T.int64(8), T.int64(8)], dtype="float32", scope="shared")
            for ci_p_fused_0 in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for ci_p_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(4), T.int64(4)):
                        with T.block("input_tile"):
                            v_ci = T.axis.spatial(T.int64(8), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax0)
                            v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax1)
                            v_eps, v_nu = T.axis.remap("SS", [ax2, ax3])
                            T.reads(p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)])
                            T.writes(input_tile_local[v_ci, v_p, v_eps, v_nu])
                            T.block_attr({"schedule_rule":"None"})
                            input_tile_local[v_ci, v_p, v_eps, v_nu] = T.if_then_else(T.int64(1) <= v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps and v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps < T.int64(29) and T.int64(1) <= v_p % T.int64(14) * T.int64(2) + v_nu and v_p % T.int64(14) * T.int64(2) + v_nu < T.int64(29), p0[v_p // T.int64(196), v_ci, v_p % T.int64(196) // T.int64(14) * T.int64(2) + v_eps - T.int64(1), v_p % T.int64(14) * T.int64(2) + v_nu - T.int64(1)], T.float32(0), dtype="float32")
                    for eps in T.unroll(T.int64(4)):
                        for nu in T.unroll(T.int64(4)):
                            for r_a in T.unroll(T.int64(4)):
                                for r_b in T.unroll(T.int64(4)):
                                    with T.block("data_pack"):
                                        v_eps, v_nu = T.axis.remap("SS", [eps, nu])
                                        v_ci = T.axis.spatial(T.int64(8), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196))
                                        v_p = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196))
                                        v_r_a, v_r_b = T.axis.remap("RR", [r_a, r_b])
                                        T.reads(input_tile_local[v_ci, v_p, v_r_a, v_r_b])
                                        T.writes(data_pack_local[v_eps, v_nu, v_ci, v_p])
                                        T.block_attr({"schedule_rule":"conv2d_nchw_winograd_data_pack"})
                                        with T.init():
                                            data_pack_local[v_eps, v_nu, v_ci, v_p] = T.float32(0)
                                        data_pack_local[v_eps, v_nu, v_ci, v_p] = data_pack_local[v_eps, v_nu, v_ci, v_p] + input_tile_local[v_ci, v_p, v_r_a, v_r_b] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_eps % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_eps % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_eps % T.int64(4) == T.int64(0), T.float32(1), T.float32(0))))))))))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(3), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_nu % T.int64(4) == T.int64(0), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(3), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(2), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_nu % T.int64(4) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(3), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(2), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_nu % T.int64(4) == T.int64(0), T.float32(1), T.float32(0)))))))))))))))))
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(4), T.int64(1), T.int64(1)):
                        with T.block("data_pack_local"):
                            v0, v1 = T.axis.remap("SS", [ax0, ax1])
                            v2 = T.axis.spatial(T.int64(8), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) // T.int64(196) + ax2)
                            v3 = T.axis.spatial(T.int64(196), (ci_p_fused_0 * T.int64(32) + ci_p_fused_1) % T.int64(196) + ax3)
                            T.reads(data_pack_local[v0, v1, v2, v3])
                            T.writes(data_pack[v0, v1, v2, v3])
                            data_pack[v0, v1, v2, v3] = data_pack_local[v0, v1, v2, v3]
            for eps_0_nu_0_co_0_p_0_fused in T.thread_binding(T.int64(49), thread="blockIdx.x"):
                for eps_1_nu_1_co_1_p_1_fused in T.thread_binding(T.int64(1), thread="vthread.x"):
                    for eps_2_nu_2_co_2_p_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for ci_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(512)):
                                with T.block("data_pack_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(128))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(128) // T.int64(32))
                                    v2 = T.axis.spatial(T.int64(8), ax0_ax1_ax2_ax3_fused % T.int64(32) // T.int64(4))
                                    v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + ax0_ax1_ax2_ax3_fused % T.int64(4))
                                    T.reads(data_pack[v0, v1, v2, v3])
                                    T.writes(data_pack_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":4})
                                    data_pack_shared[v0, v1, v2, v3] = data_pack[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(1024)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(4), ax0_ax1_ax2_ax3_fused % T.int64(256) // T.int64(64))
                                    v2 = T.axis.spatial(T.int64(8), ax0_ax1_ax2_ax3_fused % T.int64(64) // T.int64(8))
                                    v3 = T.axis.spatial(T.int64(8), ax0_ax1_ax2_ax3_fused % T.int64(8))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":1})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for ci_1, eps_3, nu_3, co_3, p_3, ci_2, eps_4, nu_4, co_4, p_4 in T.grid(T.int64(4), T.int64(4), T.int64(2), T.int64(2), T.int64(1), T.int64(2), T.int64(1), T.int64(1), T.int64(2), T.int64(1)):
                                with T.block("bgemm"):
                                    v_eps = T.axis.spatial(T.int64(4), eps_3 + eps_4)
                                    v_nu = T.axis.spatial(T.int64(4), nu_4 + eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(2) + nu_3)
                                    v_co = T.axis.spatial(T.int64(8), eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) * T.int64(4) + co_3 * T.int64(2) + co_4)
                                    v_p = T.axis.spatial(T.int64(196), p_4 + eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + p_3)
                                    v_ci = T.axis.reduce(T.int64(8), ci_0 * T.int64(8) + ci_1 * T.int64(2) + ci_2)
                                    T.reads(data_pack_shared[v_eps, v_nu, v_ci, v_p], p1_shared[v_eps, v_nu, v_ci, v_co])
                                    T.writes(bgemm_local[v_eps, v_nu, v_co, v_p])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        bgemm_local[v_eps, v_nu, v_co, v_p] = T.float32(0)
                                    bgemm_local[v_eps, v_nu, v_co, v_p] = bgemm_local[v_eps, v_nu, v_co, v_p] + data_pack_shared[v_eps, v_nu, v_ci, v_p] * p1_shared[v_eps, v_nu, v_ci, v_co]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(4), T.int64(2), T.int64(4), T.int64(1)):
                            with T.block("bgemm_local"):
                                v0 = T.axis.spatial(T.int64(4), ax0)
                                v1 = T.axis.spatial(T.int64(4), eps_2_nu_2_co_2_p_2_fused // T.int64(8) * T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(8), eps_2_nu_2_co_2_p_2_fused % T.int64(8) // T.int64(4) * T.int64(4) + ax2)
                                v3 = T.axis.spatial(T.int64(196), eps_0_nu_0_co_0_p_0_fused * T.int64(4) + eps_2_nu_2_co_2_p_2_fused % T.int64(4) + ax3)
                                T.reads(bgemm_local[v0, v1, v2, v3])
                                T.writes(bgemm[v0, v1, v2, v3])
                                bgemm[v0, v1, v2, v3] = bgemm_local[v0, v1, v2, v3]
            for n, co, h_0, w_0, ax0, ax1 in T.grid(T.int64(1), T.int64(8), T.int64(14), T.int64(14), T.int64(1), T.int64(1)):
                for ax2 in T.unroll(T.int64(2)):
                    for ax3 in T.unroll(T.int64(2)):
                        for ax4 in T.unroll(T.int64(4)):
                            for ax5 in T.unroll(T.int64(4)):
                                with T.block("inverse"):
                                    v_co = T.axis.spatial(T.int64(8), co + ax0)
                                    v_p = T.axis.spatial(T.int64(196), h_0 * T.int64(14) + w_0 + ax1)
                                    v_vh, v_vw, v_r_a, v_r_b = T.axis.remap("SSRR", [ax2, ax3, ax4, ax5])
                                    T.reads(bgemm[v_r_a, v_r_b, v_co, v_p])
                                    T.writes(inverse_local[v_co, v_p, v_vh, v_vw])
                                    T.block_attr({"schedule_rule":"conv2d_nchw_winograd_inverse"})
                                    with T.init():
                                        inverse_local[v_co, v_p, v_vh, v_vw] = T.float32(0)
                                    inverse_local[v_co, v_p, v_vh, v_vw] = inverse_local[v_co, v_p, v_vh, v_vw] + bgemm[v_r_a, v_r_b, v_co, v_p] * T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(3) and v_vh % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(2) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_a % T.int64(4) == T.int64(1) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_a % T.int64(4) == T.int64(0) and v_vh % T.int64(2) == T.int64(0), T.float32(1), T.float32(0))))))))) * T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(3) and v_vw % T.int64(2) == T.int64(0), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(1), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(2) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(1), T.float32(-1), T.Select(v_r_b % T.int64(4) == T.int64(1) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(1), T.float32(0), T.Select(v_r_b % T.int64(4) == T.int64(0) and v_vw % T.int64(2) == T.int64(0), T.float32(1), T.float32(0)))))))))
            for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(13), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    with T.block("T_add_1"):
                        T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1 < T.int64(6272))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(8), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) // T.int64(784))
                        v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(784) // T.int64(28))
                        v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(512) + ax0_ax1_ax2_ax3_fused_1) % T.int64(28))
                        T.reads(inverse_local[v_ax1, v_ax0 * T.int64(196) + v_ax2 // T.int64(2) * T.int64(14) + v_ax3 // T.int64(2), v_ax2 % T.int64(2), v_ax3 % T.int64(2)], p2[v_ax1], p3[v_ax1], p4[v_ax1])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(inverse_local[v_ax1, v_ax0 * T.int64(196) + v_ax2 // T.int64(2) * T.int64(14) + v_ax3 // T.int64(2), v_ax2 % T.int64(2), v_ax3 % T.int64(2)] + ((T.float32(0) - p2[v_ax1]) * p3[v_ax1] + p4[v_ax1]), T.float32(0))
    

b0 = sch.get_block(name="data_pack", func_name="main")
b1 = sch.get_block(name="bgemm", func_name="main")
b2 = sch.get_block(name="inverse", func_name="main")
b3 = sch.get_block(name="conv2d_winograd", func_name="main")
b4 = sch.get_block(name="T_negative", func_name="main")
b5 = sch.get_block(name="T_multiply", func_name="main")
b6 = sch.get_block(name="T_add", func_name="main")
b7 = sch.get_block(name="T_expand_dims", func_name="main")
b8 = sch.get_block(name="T_expand_dims_1", func_name="main")
b9 = sch.get_block(name="T_add_1", func_name="main")
b10 = sch.get_block(name="T_relu", func_name="main")
b11 = sch.get_block(name="root", func_name="main")
b12, b13 = sch.get_producers(block=b2)
sch.compute_inline(block=b13)
b14, = sch.get_consumers(block=b2)
l15, l16, l17, l18 = sch.get_loops(block=b14)
l19, l20 = sch.split(loop=l17, factors=[None, 2], preserve_unit_iters=True)
l21, l22 = sch.split(loop=l18, factors=[None, 2], preserve_unit_iters=True)
sch.reorder(l19, l21, l20, l22)
sch.compute_at(block=b2, loop=l21, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b2, buffer_index=0, storage_scope="local")
l23, l24, l25, l26, l27, l28, l29, l30, l31, l32 = sch.get_loops(block=b2)
sch.unroll(loop=l29)
sch.unroll(loop=l30)
sch.unroll(loop=l31)
sch.unroll(loop=l32)
b33, b34 = sch.get_producers(block=b0)
sch.compute_inline(block=b34)
b35, = sch.get_producers(block=b33)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b0)
sch.reorder(l38, l39, l36, l37, l40, l41)
sch.unroll(loop=l36)
sch.unroll(loop=l37)
sch.unroll(loop=l40)
sch.unroll(loop=l41)
l42 = sch.fuse(l38, l39, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=0)
l44, l45 = sch.split(loop=l42, factors=[None, v43], preserve_unit_iters=True)
sch.bind(loop=l44, thread_axis="blockIdx.x")
sch.bind(loop=l45, thread_axis="threadIdx.x")
b46 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b46, loop=l45, preserve_unit_loops=True, index=-1)
sch.compute_at(block=b33, loop=l45, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b33, buffer_index=0, storage_scope="local")
sch.compute_inline(block=b35)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l47, l48, l49, l50, l51 = sch.get_loops(block=b1)
v52, v53, v54, v55, v56 = sch.sample_perfect_tile(loop=l47, n=5, max_innermost_factor=64, decision=[1, 1, 1, 4, 1])
l57, l58, l59, l60, l61 = sch.split(loop=l47, factors=[v52, v53, v54, v55, v56], preserve_unit_iters=True)
v62, v63, v64, v65, v66 = sch.sample_perfect_tile(loop=l48, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 1])
l67, l68, l69, l70, l71 = sch.split(loop=l48, factors=[v62, v63, v64, v65, v66], preserve_unit_iters=True)
v72, v73, v74, v75, v76 = sch.sample_perfect_tile(loop=l49, n=5, max_innermost_factor=64, decision=[1, 1, 2, 2, 2])
l77, l78, l79, l80, l81 = sch.split(loop=l49, factors=[v72, v73, v74, v75, v76], preserve_unit_iters=True)
v82, v83, v84, v85, v86 = sch.sample_perfect_tile(loop=l50, n=5, max_innermost_factor=64, decision=[49, 1, 4, 1, 1])
l87, l88, l89, l90, l91 = sch.split(loop=l50, factors=[v82, v83, v84, v85, v86], preserve_unit_iters=True)
v92, v93, v94 = sch.sample_perfect_tile(loop=l51, n=3, max_innermost_factor=64, decision=[1, 4, 2])
l95, l96, l97 = sch.split(loop=l51, factors=[v92, v93, v94], preserve_unit_iters=True)
sch.reorder(l57, l67, l77, l87, l58, l68, l78, l88, l59, l69, l79, l89, l95, l96, l60, l70, l80, l90, l97, l61, l71, l81, l91)
l98 = sch.fuse(l57, l67, l77, l87, preserve_unit_iters=True)
sch.bind(loop=l98, thread_axis="blockIdx.x")
l99 = sch.fuse(l58, l68, l78, l88, preserve_unit_iters=True)
sch.bind(loop=l99, thread_axis="vthread.x")
l100 = sch.fuse(l59, l69, l79, l89, preserve_unit_iters=True)
sch.bind(loop=l100, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b101 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b101, loop=l100, preserve_unit_loops=True, index=-1)
b102 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b102, loop=l95, preserve_unit_loops=True, index=-1)
l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b102)
l111 = sch.fuse(l107, l108, l109, l110, preserve_unit_iters=True)
v112 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b102, ann_key="meta_schedule.cooperative_fetch", ann_val=v112)
b113 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b113, loop=l95, preserve_unit_loops=True, index=-1)
l114, l115, l116, l117, l118, l119, l120, l121 = sch.get_loops(block=b113)
l122 = sch.fuse(l118, l119, l120, l121, preserve_unit_iters=True)
v123 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b113, ann_key="meta_schedule.cooperative_fetch", ann_val=v123)
sch.reverse_compute_inline(block=b10)
sch.compute_inline(block=b8)
sch.compute_inline(block=b7)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
v124 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b11, ann_key="meta_schedule.unroll_explicit", ann_val=v124)
l125, l126, l127, l128 = sch.get_loops(block=b9)
l129 = sch.fuse(l125, l126, l127, l128, preserve_unit_iters=True)
v130 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l131, l132 = sch.split(loop=l129, factors=[None, v130], preserve_unit_iters=True)
sch.bind(loop=l131, thread_axis="blockIdx.x")
sch.bind(loop=l132, thread_axis="threadIdx.x")
