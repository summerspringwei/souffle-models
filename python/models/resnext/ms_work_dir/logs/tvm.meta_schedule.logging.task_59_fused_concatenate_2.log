2023-04-12 18:56:08 [INFO] [task_scheduler.cc:160] Initializing Task #59: "fused_concatenate_2"
2023-04-12 18:56:08 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p1: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p2: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p3: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p4: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p5: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p6: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p7: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p8: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p9: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p10: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p11: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p12: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p13: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p14: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p15: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p16: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p17: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p18: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p19: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p20: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p21: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p22: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p23: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p24: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p25: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p26: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p27: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p28: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p29: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p30: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p31: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p32: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p33: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p34: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p35: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p36: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p37: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p38: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p39: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p40: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p41: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p42: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p43: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p44: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p45: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p46: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p47: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p48: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p49: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p50: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p51: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p52: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p53: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p54: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p55: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p56: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p57: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p58: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p59: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p60: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p61: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p62: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p63: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], T_concat: T.Buffer[(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p63[v_ax0, v_ax1 - T.int64(1008), v_ax2, v_ax3], p62[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p61[v_ax0, v_ax1 - T.int64(976), v_ax2, v_ax3], p60[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p59[v_ax0, v_ax1 - T.int64(944), v_ax2, v_ax3], p58[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p57[v_ax0, v_ax1 - T.int64(912), v_ax2, v_ax3], p56[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p55[v_ax0, v_ax1 - T.int64(880), v_ax2, v_ax3], p54[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], p53[v_ax0, v_ax1 - T.int64(848), v_ax2, v_ax3], p52[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p51[v_ax0, v_ax1 - T.int64(816), v_ax2, v_ax3], p50[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p49[v_ax0, v_ax1 - T.int64(784), v_ax2, v_ax3], p48[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p47[v_ax0, v_ax1 - T.int64(752), v_ax2, v_ax3], p46[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p45[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], p44[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p43[v_ax0, v_ax1 - T.int64(688), v_ax2, v_ax3], p42[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p41[v_ax0, v_ax1 - T.int64(656), v_ax2, v_ax3], p40[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p39[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], p38[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], p37[v_ax0, v_ax1 - T.int64(592), v_ax2, v_ax3], p36[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p35[v_ax0, v_ax1 - T.int64(560), v_ax2, v_ax3], p34[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], p33[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], p32[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], p31[v_ax0, v_ax1 - T.int64(496), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(464), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(400), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(368), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(304), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(272), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1008) <= v_ax1, p63[v_ax0, v_ax1 - T.int64(1008), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p62[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(976) <= v_ax1, p61[v_ax0, v_ax1 - T.int64(976), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p60[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(944) <= v_ax1, p59[v_ax0, v_ax1 - T.int64(944), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p58[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(912) <= v_ax1, p57[v_ax0, v_ax1 - T.int64(912), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p56[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], T.if_then_else(T.int64(880) <= v_ax1, p55[v_ax0, v_ax1 - T.int64(880), v_ax2, v_ax3], T.if_then_else(T.int64(864) <= v_ax1, p54[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], T.if_then_else(T.int64(848) <= v_ax1, p53[v_ax0, v_ax1 - T.int64(848), v_ax2, v_ax3], T.if_then_else(T.int64(832) <= v_ax1, p52[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(816) <= v_ax1, p51[v_ax0, v_ax1 - T.int64(816), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p50[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(784) <= v_ax1, p49[v_ax0, v_ax1 - T.int64(784), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p48[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(752) <= v_ax1, p47[v_ax0, v_ax1 - T.int64(752), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p46[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(720) <= v_ax1, p45[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p44[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(688) <= v_ax1, p43[v_ax0, v_ax1 - T.int64(688), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p42[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(656) <= v_ax1, p41[v_ax0, v_ax1 - T.int64(656), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p40[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], T.if_then_else(T.int64(624) <= v_ax1, p39[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], T.if_then_else(T.int64(608) <= v_ax1, p38[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], T.if_then_else(T.int64(592) <= v_ax1, p37[v_ax0, v_ax1 - T.int64(592), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p36[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(560) <= v_ax1, p35[v_ax0, v_ax1 - T.int64(560), v_ax2, v_ax3], T.if_then_else(T.int64(544) <= v_ax1, p34[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], T.if_then_else(T.int64(528) <= v_ax1, p33[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], T.if_then_else(T.int64(512) <= v_ax1, p32[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], T.if_then_else(T.int64(496) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(496), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(464) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(464), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(432) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(400) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(400), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(368) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(368), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(336) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(304) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(304), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(272) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(272), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(224) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], T.if_then_else(T.int64(208) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], T.if_then_else(T.int64(176) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], T.if_then_else(T.int64(160) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], T.if_then_else(T.int64(144) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], T.if_then_else(T.int64(128) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], T.if_then_else(T.int64(112) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], T.if_then_else(T.int64(96) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], T.if_then_else(T.int64(80) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], T.if_then_else(T.int64(64) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], T.if_then_else(T.int64(48) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], T.if_then_else(T.int64(32) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], T.if_then_else(T.int64(16) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32")
    

2023-04-12 18:56:08 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:08 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p1: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p2: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p3: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p4: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p5: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p6: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p7: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p8: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p9: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p10: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p11: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p12: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p13: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p14: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p15: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p16: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p17: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p18: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p19: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p20: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p21: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p22: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p23: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p24: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p25: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p26: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p27: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p28: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p29: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p30: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p31: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p32: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p33: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p34: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p35: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p36: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p37: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p38: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p39: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p40: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p41: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p42: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p43: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p44: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p45: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p46: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p47: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p48: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p49: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p50: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p51: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p52: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p53: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p54: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p55: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p56: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p57: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p58: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p59: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p60: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p61: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p62: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], p63: T.Buffer[(T.int64(1), T.int64(16), T.int64(14), T.int64(14)), "float32"], T_concat: T.Buffer[(T.int64(1), T.int64(1024), T.int64(14), T.int64(14)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(1568), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                with T.block("T_concat"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(1024), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) // T.int64(196))
                    v_ax2 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(196) // T.int64(14))
                    v_ax3 = T.axis.spatial(T.int64(14), (ax0_ax1_ax2_ax3_fused_0 * T.int64(128) + ax0_ax1_ax2_ax3_fused_1) % T.int64(14))
                    T.reads(p63[v_ax0, v_ax1 - T.int64(1008), v_ax2, v_ax3], p62[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], p61[v_ax0, v_ax1 - T.int64(976), v_ax2, v_ax3], p60[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], p59[v_ax0, v_ax1 - T.int64(944), v_ax2, v_ax3], p58[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], p57[v_ax0, v_ax1 - T.int64(912), v_ax2, v_ax3], p56[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], p55[v_ax0, v_ax1 - T.int64(880), v_ax2, v_ax3], p54[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], p53[v_ax0, v_ax1 - T.int64(848), v_ax2, v_ax3], p52[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], p51[v_ax0, v_ax1 - T.int64(816), v_ax2, v_ax3], p50[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], p49[v_ax0, v_ax1 - T.int64(784), v_ax2, v_ax3], p48[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], p47[v_ax0, v_ax1 - T.int64(752), v_ax2, v_ax3], p46[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], p45[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], p44[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], p43[v_ax0, v_ax1 - T.int64(688), v_ax2, v_ax3], p42[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], p41[v_ax0, v_ax1 - T.int64(656), v_ax2, v_ax3], p40[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], p39[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], p38[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], p37[v_ax0, v_ax1 - T.int64(592), v_ax2, v_ax3], p36[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], p35[v_ax0, v_ax1 - T.int64(560), v_ax2, v_ax3], p34[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], p33[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], p32[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], p31[v_ax0, v_ax1 - T.int64(496), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(464), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(400), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(368), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(304), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(272), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                    T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(1008) <= v_ax1, p63[v_ax0, v_ax1 - T.int64(1008), v_ax2, v_ax3], T.if_then_else(T.int64(992) <= v_ax1, p62[v_ax0, v_ax1 - T.int64(992), v_ax2, v_ax3], T.if_then_else(T.int64(976) <= v_ax1, p61[v_ax0, v_ax1 - T.int64(976), v_ax2, v_ax3], T.if_then_else(T.int64(960) <= v_ax1, p60[v_ax0, v_ax1 - T.int64(960), v_ax2, v_ax3], T.if_then_else(T.int64(944) <= v_ax1, p59[v_ax0, v_ax1 - T.int64(944), v_ax2, v_ax3], T.if_then_else(T.int64(928) <= v_ax1, p58[v_ax0, v_ax1 - T.int64(928), v_ax2, v_ax3], T.if_then_else(T.int64(912) <= v_ax1, p57[v_ax0, v_ax1 - T.int64(912), v_ax2, v_ax3], T.if_then_else(T.int64(896) <= v_ax1, p56[v_ax0, v_ax1 - T.int64(896), v_ax2, v_ax3], T.if_then_else(T.int64(880) <= v_ax1, p55[v_ax0, v_ax1 - T.int64(880), v_ax2, v_ax3], T.if_then_else(T.int64(864) <= v_ax1, p54[v_ax0, v_ax1 - T.int64(864), v_ax2, v_ax3], T.if_then_else(T.int64(848) <= v_ax1, p53[v_ax0, v_ax1 - T.int64(848), v_ax2, v_ax3], T.if_then_else(T.int64(832) <= v_ax1, p52[v_ax0, v_ax1 - T.int64(832), v_ax2, v_ax3], T.if_then_else(T.int64(816) <= v_ax1, p51[v_ax0, v_ax1 - T.int64(816), v_ax2, v_ax3], T.if_then_else(T.int64(800) <= v_ax1, p50[v_ax0, v_ax1 - T.int64(800), v_ax2, v_ax3], T.if_then_else(T.int64(784) <= v_ax1, p49[v_ax0, v_ax1 - T.int64(784), v_ax2, v_ax3], T.if_then_else(T.int64(768) <= v_ax1, p48[v_ax0, v_ax1 - T.int64(768), v_ax2, v_ax3], T.if_then_else(T.int64(752) <= v_ax1, p47[v_ax0, v_ax1 - T.int64(752), v_ax2, v_ax3], T.if_then_else(T.int64(736) <= v_ax1, p46[v_ax0, v_ax1 - T.int64(736), v_ax2, v_ax3], T.if_then_else(T.int64(720) <= v_ax1, p45[v_ax0, v_ax1 - T.int64(720), v_ax2, v_ax3], T.if_then_else(T.int64(704) <= v_ax1, p44[v_ax0, v_ax1 - T.int64(704), v_ax2, v_ax3], T.if_then_else(T.int64(688) <= v_ax1, p43[v_ax0, v_ax1 - T.int64(688), v_ax2, v_ax3], T.if_then_else(T.int64(672) <= v_ax1, p42[v_ax0, v_ax1 - T.int64(672), v_ax2, v_ax3], T.if_then_else(T.int64(656) <= v_ax1, p41[v_ax0, v_ax1 - T.int64(656), v_ax2, v_ax3], T.if_then_else(T.int64(640) <= v_ax1, p40[v_ax0, v_ax1 - T.int64(640), v_ax2, v_ax3], T.if_then_else(T.int64(624) <= v_ax1, p39[v_ax0, v_ax1 - T.int64(624), v_ax2, v_ax3], T.if_then_else(T.int64(608) <= v_ax1, p38[v_ax0, v_ax1 - T.int64(608), v_ax2, v_ax3], T.if_then_else(T.int64(592) <= v_ax1, p37[v_ax0, v_ax1 - T.int64(592), v_ax2, v_ax3], T.if_then_else(T.int64(576) <= v_ax1, p36[v_ax0, v_ax1 - T.int64(576), v_ax2, v_ax3], T.if_then_else(T.int64(560) <= v_ax1, p35[v_ax0, v_ax1 - T.int64(560), v_ax2, v_ax3], T.if_then_else(T.int64(544) <= v_ax1, p34[v_ax0, v_ax1 - T.int64(544), v_ax2, v_ax3], T.if_then_else(T.int64(528) <= v_ax1, p33[v_ax0, v_ax1 - T.int64(528), v_ax2, v_ax3], T.if_then_else(T.int64(512) <= v_ax1, p32[v_ax0, v_ax1 - T.int64(512), v_ax2, v_ax3], T.if_then_else(T.int64(496) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(496), v_ax2, v_ax3], T.if_then_else(T.int64(480) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(480), v_ax2, v_ax3], T.if_then_else(T.int64(464) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(464), v_ax2, v_ax3], T.if_then_else(T.int64(448) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(448), v_ax2, v_ax3], T.if_then_else(T.int64(432) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(432), v_ax2, v_ax3], T.if_then_else(T.int64(416) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(416), v_ax2, v_ax3], T.if_then_else(T.int64(400) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(400), v_ax2, v_ax3], T.if_then_else(T.int64(384) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(384), v_ax2, v_ax3], T.if_then_else(T.int64(368) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(368), v_ax2, v_ax3], T.if_then_else(T.int64(352) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(352), v_ax2, v_ax3], T.if_then_else(T.int64(336) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(336), v_ax2, v_ax3], T.if_then_else(T.int64(320) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(320), v_ax2, v_ax3], T.if_then_else(T.int64(304) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(304), v_ax2, v_ax3], T.if_then_else(T.int64(288) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(288), v_ax2, v_ax3], T.if_then_else(T.int64(272) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(272), v_ax2, v_ax3], T.if_then_else(T.int64(256) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(256), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(224) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], T.if_then_else(T.int64(208) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], T.if_then_else(T.int64(176) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], T.if_then_else(T.int64(160) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], T.if_then_else(T.int64(144) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], T.if_then_else(T.int64(128) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], T.if_then_else(T.int64(112) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], T.if_then_else(T.int64(96) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], T.if_then_else(T.int64(80) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], T.if_then_else(T.int64(64) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], T.if_then_else(T.int64(48) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], T.if_then_else(T.int64(32) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], T.if_then_else(T.int64(16) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32")
    

b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
v6 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=2)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
