2023-04-12 18:56:00 [INFO] [task_scheduler.cc:160] Initializing Task #43: "fused_nn_pad"
2023-04-12 18:56:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"], T_pad: T.Buffer[(T.int64(1), T.int64(3), T.int64(230), T.int64(230)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        compile_engine_const = T.alloc_buffer([], dtype="int32")
        T_cast = T.alloc_buffer([], dtype="float32")
        with T.block("compile_engine_const"):
            vi = T.axis.spatial(T.int64(1), T.int64(0))
            T.reads()
            T.writes(compile_engine_const[()])
            compile_engine_const[()] = 0
        with T.block("T_cast"):
            vi = T.axis.spatial(T.int64(1), T.int64(0))
            T.reads(compile_engine_const[()])
            T.writes(T_cast[()])
            T_cast[()] = T.Cast("float32", compile_engine_const[()])
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(3), T.int64(230), T.int64(230)):
            with T.block("T_pad"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(3), v_ax3 - T.int64(3)], T_cast[()])
                T.writes(T_pad[v_ax0, v_ax1, v_ax2, v_ax3])
                T_pad[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(3) <= v_ax2 and v_ax2 < T.int64(227) and T.int64(3) <= v_ax3 and v_ax3 < T.int64(227), p0[v_ax0, v_ax1, v_ax2 - T.int64(3), v_ax3 - T.int64(3)], T_cast[()], dtype="float32")
    

2023-04-12 18:56:00 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(224), T.int64(224)), "float32"], T_pad: T.Buffer[(T.int64(1), T.int64(3), T.int64(230), T.int64(230)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_ax2_ax3_fused_0 in T.thread_binding(T.int64(620), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_pad"):
                    T.where(ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1 < T.int64(158700))
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(3), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) // T.int64(52900))
                    v_ax2 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(52900) // T.int64(230))
                    v_ax3 = T.axis.spatial(T.int64(230), (ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) % T.int64(230))
                    T.reads(p0[v_ax0, v_ax1, v_ax2 - T.int64(3), v_ax3 - T.int64(3)])
                    T.writes(T_pad[v_ax0, v_ax1, v_ax2, v_ax3])
                    T_pad[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(3) <= v_ax2 and v_ax2 < T.int64(227) and T.int64(3) <= v_ax3 and v_ax3 < T.int64(227), p0[v_ax0, v_ax1, v_ax2 - T.int64(3), v_ax3 - T.int64(3)], T.Cast("float32", 0), dtype="float32")
    

b0 = sch.get_block(name="compile_engine_const", func_name="main")
b1 = sch.get_block(name="T_cast", func_name="main")
b2 = sch.get_block(name="T_pad", func_name="main")
sch.compute_inline(block=b0)
sch.compute_inline(block=b1)
l3, l4, l5, l6 = sch.get_loops(block=b2)
l7 = sch.fuse(l3, l4, l5, l6, preserve_unit_iters=True)
v8 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l9, l10 = sch.split(loop=l7, factors=[None, v8], preserve_unit_iters=True)
sch.bind(loop=l9, thread_axis="blockIdx.x")
sch.bind(loop=l10, thread_axis="threadIdx.x")
2023-04-12 18:59:53 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 18:59:53 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 18:59:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eedba5d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564ef120e2c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef120e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef0c78168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef2963518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef00d31f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564ef0fb1bd8)]: 0 failure(s)
2023-04-12 18:59:54 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-04-12 18:59:54 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eedba5d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564ef120e2c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef120e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef0c78168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef2963518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef00d31f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564ef0fb1bd8)]: 0 failure(s)
2023-04-12 18:59:54 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eedba5d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564ef120e2c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef120e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef0c78168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef2963518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef00d31f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564ef0fb1bd8)]: 0 failure(s)
2023-04-12 18:59:55 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eedba5d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564ef120e2c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef120e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef0c78168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef2963518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef00d31f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564ef0fb1bd8)]: 0 failure(s)
2023-04-12 18:59:55 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eedba5d78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564ef120e2c8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef120e298)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef0c78168)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef2963518)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef00d31f8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564ef0fb1bd8)]: 0 failure(s)
2023-04-12 18:59:55 [INFO] [evolutionary_search.cc:649] Scores of the best 6 candidates:
[1 : 6]:	1.0000  0.9566  0.6830  0.5305  0.1935  0.0103
2023-04-12 18:59:55 [INFO] [evolutionary_search.cc:727] Got 6 candidate(s) with evolutionary search
2023-04-12 18:59:55 [INFO] [evolutionary_search.cc:730] Sending 6 candidates(s) for measurement
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #1: GFLOPs: 0.0003. Time: 3.6116 us. Best GFLOPs: 0.0003
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #2: GFLOPs: 0.0002. Time: 6.4512 us. Best GFLOPs: 0.0003
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #3: GFLOPs: 0.0003. Time: 3.1779 us. Best GFLOPs: 0.0003
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #4: GFLOPs: 0.0002. Time: 4.4887 us. Best GFLOPs: 0.0003
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #5: GFLOPs: 0.0003. Time: 3.3860 us. Best GFLOPs: 0.0003
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #43: fused_nn_pad] Trial #6: GFLOPs: 0.0003. Time: 3.3528 us. Best GFLOPs: 0.0003
