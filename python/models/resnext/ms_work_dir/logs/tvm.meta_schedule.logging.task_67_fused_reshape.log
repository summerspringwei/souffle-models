2023-04-12 18:56:12 [INFO] [task_scheduler.cc:160] Initializing Task #67: "fused_reshape"
2023-04-12 18:56:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(2048)), "float32"], T_reshape: T.Buffer[(T.int64(1), T.int64(2048)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
            with T.block("T_reshape"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(p0[T.int64(0), v_ax1 % T.int64(2048)])
                T.writes(T_reshape[v_ax0, v_ax1])
                T_reshape[v_ax0, v_ax1] = p0[T.int64(0), v_ax1 % T.int64(2048)]
    

2023-04-12 18:56:12 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(2048)), "float32"], T_reshape: T.Buffer[(T.int64(1), T.int64(2048)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_fused_0 in T.thread_binding(T.int64(8), thread="blockIdx.x"):
            for ax0_ax1_fused_1 in T.thread_binding(T.int64(256), thread="threadIdx.x"):
                with T.block("T_reshape"):
                    v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                    v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_fused_0 * T.int64(256) + ax0_ax1_fused_1)
                    T.reads(p0[T.int64(0), v_ax1 % T.int64(2048)])
                    T.writes(T_reshape[v_ax0, v_ax1])
                    T_reshape[v_ax0, v_ax1] = p0[T.int64(0), v_ax1 % T.int64(2048)]
    

b0 = sch.get_block(name="T_reshape", func_name="main")
l1, l2 = sch.get_loops(block=b0)
l3 = sch.fuse(l1, l2, preserve_unit_iters=True)
v4 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=3)
l5, l6 = sch.split(loop=l3, factors=[None, v4], preserve_unit_iters=True)
sch.bind(loop=l5, thread_axis="blockIdx.x")
sch.bind(loop=l6, thread_axis="threadIdx.x")
