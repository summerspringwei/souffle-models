2023-04-12 18:55:56 [INFO] [task_scheduler.cc:160] Initializing Task #23: "fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2"
2023-04-12 18:55:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"], p1: T.Buffer[(T.int64(512), T.int64(256), T.int64(1), T.int64(1)), "float32"], p2: T.Buffer[T.int64(512), "float32"], p3: T.Buffer[T.int64(512), "float32"], p4: T.Buffer[T.int64(512), "float32"], T_add: T.Buffer[(T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(56), T.int64(56)], dtype="float32")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(512), T.int64(28), T.int64(28)], dtype="float32")
        T_negative = T.alloc_buffer([T.int64(512)], dtype="float32")
        T_multiply = T.alloc_buffer([T.int64(512)], dtype="float32")
        T_add_1 = T.alloc_buffer([T.int64(512)], dtype="float32")
        T_expand_dims = T.alloc_buffer([T.int64(512), T.int64(1), T.int64(1)], dtype="float32")
        T_expand_dims_1 = T.alloc_buffer([T.int64(1), T.int64(512), T.int64(1), T.int64(1)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28), T.int64(256), T.int64(1), T.int64(1)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0 in T.serial(T.int64(512)):
            with T.block("T_negative"):
                v_ax0 = T.axis.spatial(T.int64(512), ax0)
                T.reads(p2[v_ax0])
                T.writes(T_negative[v_ax0])
                T_negative[v_ax0] = T.float32(0) - p2[v_ax0]
        for ax0 in T.serial(T.int64(512)):
            with T.block("T_multiply"):
                v_ax0 = T.axis.spatial(T.int64(512), ax0)
                T.reads(T_negative[v_ax0], p3[v_ax0])
                T.writes(T_multiply[v_ax0])
                T_multiply[v_ax0] = T_negative[v_ax0] * p3[v_ax0]
        for ax0 in T.serial(T.int64(512)):
            with T.block("T_add"):
                v_ax0 = T.axis.spatial(T.int64(512), ax0)
                T.reads(T_multiply[v_ax0], p4[v_ax0])
                T.writes(T_add_1[v_ax0])
                T_add_1[v_ax0] = T_multiply[v_ax0] + p4[v_ax0]
        for ax0, ax1, ax2 in T.grid(T.int64(512), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(T_add_1[v_ax0])
                T.writes(T_expand_dims[v_ax0, v_ax1, v_ax2])
                T_expand_dims[v_ax0, v_ax1, v_ax2] = T_add_1[v_ax0]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_expand_dims[v_ax1, v_ax2, v_ax3])
                T.writes(T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_expand_dims[v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(512), T.int64(28), T.int64(28)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
    

2023-04-12 18:55:56 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:55:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"], p1: T.Buffer[(T.int64(512), T.int64(256), T.int64(1), T.int64(1)), "float32"], p2: T.Buffer[T.int64(512), "float32"], p3: T.Buffer[T.int64(512), "float32"], p4: T.Buffer[T.int64(512), "float32"], T_add: T.Buffer[(T.int64(1), T.int64(512), T.int64(28), T.int64(28)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":64})
            conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(512), T.int64(28), T.int64(28)], dtype="float32")
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(512), T.int64(28), T.int64(28)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(256), T.int64(56), T.int64(56)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(512), T.int64(256), T.int64(1), T.int64(1)], dtype="float32", scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(112), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(16), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(14), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(48384)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(48384) // T.int64(189))
                                    v2 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(2) * T.int64(8) + ax0_ax1_ax2_ax3_fused % T.int64(189) // T.int64(27))
                                    v3 = T.axis.spatial(T.int64(56), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(28) + ax0_ax1_ax2_ax3_fused % T.int64(27))
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":4})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(16384)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + ax0_ax1_ax2_ax3_fused // T.int64(256))
                                    v1 = T.axis.spatial(T.int64(256), ax0_ax1_ax2_ax3_fused % T.int64(256))
                                    v2 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v3 = T.axis.spatial(T.int64(1), T.int64(0))
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(256), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(4), T.int64(1), T.int64(1)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ff_3 * T.int64(4) + ff_4)
                                    v_yy = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(2) + yy_3 + yy_4)
                                    v_xx = T.axis.spatial(T.int64(28), xx_3 + xx_4 + nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7))
                                    v_rc = T.axis.reduce(T.int64(256), rc_0 * T.int64(256) + rc_1 + rc_2)
                                    v_ry = T.axis.reduce(T.int64(1), ry_2 + ry_0 + ry_1)
                                    v_rx = T.axis.reduce(T.int64(1), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(1), T.int64(1)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(512), nn_0_ff_0_yy_0_xx_0_fused // T.int64(14) * T.int64(64) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(8) * T.int64(32) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(7) * T.int64(16) + ax1)
                                v2 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(14) // T.int64(2) * T.int64(4) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(8) // T.int64(2) + ax2)
                                v3 = T.axis.spatial(T.int64(28), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(14) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(2) * T.int64(7) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(7) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(2)):
                        with T.block("T_add_1"):
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(401408))
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(512), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(784))
                            v_ax2 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(784) // T.int64(28))
                            v_ax3 = T.axis.spatial(T.int64(28), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(28))
                            T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax1], p3[v_ax1], p4[v_ax1])
                            T.writes(T_add[v_ax0, v_ax1, v_ax2, v_ax3])
                            T_add[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + ((T.float32(0) - p2[v_ax1]) * p3[v_ax1] + p4[v_ax1])
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_negative", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_expand_dims", func_name="main")
b6 = sch.get_block(name="T_expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add_1", func_name="main")
b8 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l9, l10, l11, l12, l13, l14, l15 = sch.get_loops(block=b1)
v16, v17, v18, v19, v20 = sch.sample_perfect_tile(loop=l9, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l21, l22, l23, l24, l25 = sch.split(loop=l9, factors=[v16, v17, v18, v19, v20], preserve_unit_iters=True)
v26, v27, v28, v29, v30 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[8, 2, 2, 4, 4])
l31, l32, l33, l34, l35 = sch.split(loop=l10, factors=[v26, v27, v28, v29, v30], preserve_unit_iters=True)
v36, v37, v38, v39, v40 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[7, 4, 1, 1, 1])
l41, l42, l43, l44, l45 = sch.split(loop=l11, factors=[v36, v37, v38, v39, v40], preserve_unit_iters=True)
v46, v47, v48, v49, v50 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 2, 7, 1, 1])
l51, l52, l53, l54, l55 = sch.split(loop=l12, factors=[v46, v47, v48, v49, v50], preserve_unit_iters=True)
v56, v57, v58 = sch.sample_perfect_tile(loop=l13, n=3, max_innermost_factor=64, decision=[1, 256, 1])
l59, l60, l61 = sch.split(loop=l13, factors=[v56, v57, v58], preserve_unit_iters=True)
v62, v63, v64 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l65, l66, l67 = sch.split(loop=l14, factors=[v62, v63, v64], preserve_unit_iters=True)
v68, v69, v70 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 1])
l71, l72, l73 = sch.split(loop=l15, factors=[v68, v69, v70], preserve_unit_iters=True)
sch.reorder(l21, l31, l41, l51, l22, l32, l42, l52, l23, l33, l43, l53, l59, l65, l71, l60, l66, l72, l24, l34, l44, l54, l61, l67, l73, l25, l35, l45, l55)
l74 = sch.fuse(l21, l31, l41, l51, preserve_unit_iters=True)
sch.bind(loop=l74, thread_axis="blockIdx.x")
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="vthread.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b77 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b77, loop=l76, preserve_unit_loops=True, index=-1)
b78 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b78, loop=l71, preserve_unit_loops=True, index=-1)
l79, l80, l81, l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b78)
l89 = sch.fuse(l85, l86, l87, l88, preserve_unit_iters=True)
v90 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b78, ann_key="meta_schedule.cooperative_fetch", ann_val=v90)
b91 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b91, loop=l71, preserve_unit_loops=True, index=-1)
l92, l93, l94, l95, l96, l97, l98, l99, l100, l101 = sch.get_loops(block=b91)
l102 = sch.fuse(l98, l99, l100, l101, preserve_unit_iters=True)
v103 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b91, ann_key="meta_schedule.cooperative_fetch", ann_val=v103)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v104 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b8, ann_key="meta_schedule.unroll_explicit", ann_val=v104)
l105, l106, l107, l108 = sch.get_loops(block=b7)
l109 = sch.fuse(l105, l106, l107, l108, preserve_unit_iters=True)
l110, l111, l112 = sch.split(loop=l109, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l111, l112, l110)
sch.bind(loop=l111, thread_axis="blockIdx.x")
sch.bind(loop=l112, thread_axis="threadIdx.x")
2023-04-12 18:58:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 18:58:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 18:58:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 474 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 955 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:13 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2023-04-12 18:58:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 95 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:17 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:19 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 83 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:21 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eed00d698)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eef3f5fa8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eec1bf238)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed1bb7b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eeceb1e28)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef5154be8)]: 82 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec4d8ad8)]: 0 failure(s)
2023-04-12 18:58:22 [INFO] [evolutionary_search.cc:649] Scores of the best 10 candidates:
[1 : 10]:	0.9987  0.9979  0.9978  0.9968  0.9963  0.9958  0.9945  0.9944  0.9933  0.9923
2023-04-12 18:58:22 [INFO] [evolutionary_search.cc:727] Got 10 candidate(s) with evolutionary search
2023-04-12 18:58:22 [INFO] [evolutionary_search.cc:730] Sending 10 candidates(s) for measurement
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #1: GFLOPs: 102.0085. Time: 2018.6931 us. Best GFLOPs: 102.0085
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #2: GFLOPs: 1047.8164. Time: 196.5266 us. Best GFLOPs: 1047.8164
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #3: GFLOPs: 160.2223. Time: 1285.2381 us. Best GFLOPs: 1047.8164
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #4: GFLOPs: 1703.3227. Time: 120.8954 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #5: GFLOPs: 19.4363. Time: 10594.8158 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #6: GFLOPs: 9.0766. Time: 22687.3336 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #7: GFLOPs: 108.0556. Time: 1905.7220 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #8: GFLOPs: 264.9289. Time: 777.2795 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #9: GFLOPs: 25.7525. Time: 7996.2586 us. Best GFLOPs: 1703.3227
2023-04-12 19:03:28 [INFO] [task_scheduler.cc:131] [Task #23: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_2] Trial #10: GFLOPs: 127.4721. Time: 1615.4426 us. Best GFLOPs: 1703.3227
