2023-04-12 18:56:00 [INFO] [task_scheduler.cc:160] Initializing Task #44: "fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu"
2023-04-12 18:56:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(230), T.int64(230)), "float32"], p1: T.Buffer[(T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"], p2: T.Buffer[T.int64(64), "float32"], p3: T.Buffer[T.int64(64), "float32"], p4: T.Buffer[T.int64(64), "float32"], T_relu: T.Buffer[(T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        pad_temp = T.alloc_buffer([T.int64(1), T.int64(3), T.int64(230), T.int64(230)], dtype="float32")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32")
        T_negative = T.alloc_buffer([T.int64(64)], dtype="float32")
        T_multiply = T.alloc_buffer([T.int64(64)], dtype="float32")
        T_add = T.alloc_buffer([T.int64(64)], dtype="float32")
        T_expand_dims = T.alloc_buffer([T.int64(64), T.int64(1), T.int64(1)], dtype="float32")
        T_expand_dims_1 = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(1), T.int64(1)], dtype="float32")
        T_add_1 = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32")
        for i0, i1, i2, i3 in T.grid(T.int64(1), T.int64(3), T.int64(230), T.int64(230)):
            with T.block("pad_temp"):
                v_i0, v_i1, v_i2, v_i3 = T.axis.remap("SSSS", [i0, i1, i2, i3])
                T.reads(p0[v_i0, v_i1, v_i2, v_i3])
                T.writes(pad_temp[v_i0, v_i1, v_i2, v_i3])
                pad_temp[v_i0, v_i1, v_i2, v_i3] = p0[v_i0, v_i1, v_i2, v_i3]
        for nn, ff, yy, xx, rc, ry, rx in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112), T.int64(3), T.int64(7), T.int64(7)):
            with T.block("conv2d_nchw"):
                v_nn, v_ff, v_yy, v_xx, v_rc, v_ry, v_rx = T.axis.remap("SSSSRRR", [nn, ff, yy, xx, rc, ry, rx])
                T.reads(pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p1[v_ff, v_rc, v_ry, v_rx])
                T.writes(conv2d_nchw[v_nn, v_ff, v_yy, v_xx])
                with T.init():
                    conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                conv2d_nchw[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw[v_nn, v_ff, v_yy, v_xx] + pad_temp[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p1[v_ff, v_rc, v_ry, v_rx]
        for ax0 in T.serial(T.int64(64)):
            with T.block("T_negative"):
                v_ax0 = T.axis.spatial(T.int64(64), ax0)
                T.reads(p2[v_ax0])
                T.writes(T_negative[v_ax0])
                T_negative[v_ax0] = T.float32(0) - p2[v_ax0]
        for ax0 in T.serial(T.int64(64)):
            with T.block("T_multiply"):
                v_ax0 = T.axis.spatial(T.int64(64), ax0)
                T.reads(T_negative[v_ax0], p3[v_ax0])
                T.writes(T_multiply[v_ax0])
                T_multiply[v_ax0] = T_negative[v_ax0] * p3[v_ax0]
        for ax0 in T.serial(T.int64(64)):
            with T.block("T_add"):
                v_ax0 = T.axis.spatial(T.int64(64), ax0)
                T.reads(T_multiply[v_ax0], p4[v_ax0])
                T.writes(T_add[v_ax0])
                T_add[v_ax0] = T_multiply[v_ax0] + p4[v_ax0]
        for ax0, ax1, ax2 in T.grid(T.int64(64), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims"):
                v_ax0, v_ax1, v_ax2 = T.axis.remap("SSS", [ax0, ax1, ax2])
                T.reads(T_add[v_ax0])
                T.writes(T_expand_dims[v_ax0, v_ax1, v_ax2])
                T_expand_dims[v_ax0, v_ax1, v_ax2] = T_add[v_ax0]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(1), T.int64(1)):
            with T.block("T_expand_dims_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_expand_dims[v_ax1, v_ax2, v_ax3])
                T.writes(T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_expand_dims_1[v_ax0, v_ax1, v_ax2, v_ax3] = T_expand_dims[v_ax1, v_ax2, v_ax3]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_add_1"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)])
                T.writes(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T_add_1[v_ax0, v_ax1, v_ax2, v_ax3] = conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + T_expand_dims_1[v_ax0, v_ax1, T.int64(0), T.int64(0)]
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(64), T.int64(112), T.int64(112)):
            with T.block("T_relu"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(T_add_1[v_ax0, v_ax1, v_ax2, v_ax3], T.float32(0))
    

2023-04-12 18:56:00 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(230), T.int64(230)), "float32"], p1: T.Buffer[(T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"], p2: T.Buffer[T.int64(64), "float32"], p3: T.Buffer[T.int64(64), "float32"], p4: T.Buffer[T.int64(64), "float32"], T_relu: T.Buffer[(T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":64})
            conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32")
            conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32", scope="local")
            pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(3), T.int64(230), T.int64(230)], dtype="float32", scope="shared")
            p1_shared = T.alloc_buffer([T.int64(64), T.int64(3), T.int64(7), T.int64(7)], dtype="float32", scope="shared")
            for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x"):
                for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(112), thread="vthread.x"):
                    for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(16), thread="threadIdx.x"):
                        for rc_0, ry_0, rx_0 in T.grid(T.int64(1), T.int64(1), T.int64(7)):
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(78273)):
                                with T.block("pad_temp_shared"):
                                    v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                    v1 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused // T.int64(26091))
                                    v2 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(112) + ax0_ax1_ax2_ax3_fused % T.int64(26091) // T.int64(223))
                                    v3 = T.axis.spatial(T.int64(230), ax0_ax1_ax2_ax3_fused % T.int64(223) + rx_0)
                                    T.reads(p0[v0, v1, v2, v3])
                                    T.writes(pad_temp_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":1})
                                    pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                            for ax0_ax1_ax2_ax3_fused in T.serial(T.int64(336)):
                                with T.block("p1_shared"):
                                    v0 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + ax0_ax1_ax2_ax3_fused // T.int64(21))
                                    v1 = T.axis.spatial(T.int64(3), ax0_ax1_ax2_ax3_fused % T.int64(21) // T.int64(7))
                                    v2 = T.axis.spatial(T.int64(7), ax0_ax1_ax2_ax3_fused % T.int64(7))
                                    v3 = T.axis.spatial(T.int64(7), rx_0)
                                    T.reads(p1[v0, v1, v2, v3])
                                    T.writes(p1_shared[v0, v1, v2, v3])
                                    T.block_attr({"meta_schedule.cooperative_fetch":3})
                                    p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                            for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7), T.int64(1), T.int64(3), T.int64(7), T.int64(1), T.int64(1), T.int64(1), T.int64(2), T.int64(4)):
                                with T.block("conv2d_nchw"):
                                    v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                    v_ff = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ff_3 + ff_4)
                                    v_yy = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(28) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + yy_3 * T.int64(2) + yy_4)
                                    v_xx = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) * T.int64(4) + xx_3 * T.int64(4) + xx_4)
                                    v_rc = T.axis.reduce(T.int64(3), rc_0 * T.int64(3) + rc_1 * T.int64(3) + rc_2)
                                    v_ry = T.axis.reduce(T.int64(7), ry_0 * T.int64(7) + ry_1 * T.int64(7) + ry_2)
                                    v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2 + rx_0)
                                    T.reads(pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                    T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                    with T.init():
                                        conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                                    conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(1), T.int64(14), T.int64(4)):
                            with T.block("conv2d_nchw_local"):
                                v0 = T.axis.spatial(T.int64(1), ax0)
                                v1 = T.axis.spatial(T.int64(64), nn_0_ff_0_yy_0_xx_0_fused // T.int64(2) * T.int64(16) + nn_1_ff_1_yy_1_xx_1_fused // T.int64(56) * T.int64(8) + nn_2_ff_2_yy_2_xx_2_fused // T.int64(2) + ax1)
                                v2 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused % T.int64(2) * T.int64(56) + nn_1_ff_1_yy_1_xx_1_fused % T.int64(56) // T.int64(28) * T.int64(28) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(2) * T.int64(14) + ax2)
                                v3 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused % T.int64(28) * T.int64(4) + ax3)
                                T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                                T.writes(conv2d_nchw[v0, v1, v2, v3])
                                conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
                for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                    for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(4)):
                        with T.block("T_add_1"):
                            T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                            v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                            v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                            T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax1], p3[v_ax1], p4[v_ax1])
                            T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                            T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + ((T.float32(0) - p2[v_ax1]) * p3[v_ax1] + p4[v_ax1]), T.float32(0))
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_negative", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_expand_dims", func_name="main")
b6 = sch.get_block(name="T_expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add_1", func_name="main")
b8 = sch.get_block(name="T_relu", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[4, 2, 8, 1, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[2, 2, 2, 7, 2])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[1, 28, 1, 1, 4])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[1, 1, 3])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[1, 1, 7])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
2023-04-12 18:59:58 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 18:59:58 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 18:59:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 468 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 935 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:01 [INFO] [evolutionary_search.cc:723] Sampled 89 candidate(s)
2023-04-12 19:00:03 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 91 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:05 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:07 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 86 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:09 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eefcf4a28)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eedde1ce8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564eedde1cb8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564eed704ae8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564eedbd1268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef062f4e8)]: 93 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eec3b24f8)]: 0 failure(s)
2023-04-12 19:00:09 [INFO] [evolutionary_search.cc:649] Scores of the best 10 candidates:
[1 : 10]:	0.9993  0.9990  0.9985  0.9982  0.9962  0.9960  0.9957  0.9956  0.9955  0.9950
2023-04-12 19:00:10 [INFO] [evolutionary_search.cc:727] Got 10 candidate(s) with evolutionary search
2023-04-12 19:00:10 [INFO] [evolutionary_search.cc:730] Sending 10 candidates(s) for measurement
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:121] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #1: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(3), T.int64(230), T.int64(230)), "float32"], p1: T.Buffer[(T.int64(64), T.int64(3), T.int64(7), T.int64(7)), "float32"], p2: T.Buffer[T.int64(64), "float32"], p3: T.Buffer[T.int64(64), "float32"], p4: T.Buffer[T.int64(64), "float32"], T_relu: T.Buffer[(T.int64(1), T.int64(64), T.int64(112), T.int64(112)), "float32"]):
        # function attr dict
        T.func_attr({"tir.noalias": True, "global_symbol": "main"})
        # body
        # with T.block("root")
        conv2d_nchw = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32")
        conv2d_nchw_local = T.alloc_buffer([T.int64(1), T.int64(64), T.int64(112), T.int64(112)], dtype="float32", scope="local")
        pad_temp_shared = T.alloc_buffer([T.int64(1), T.int64(3), T.int64(230), T.int64(230)], dtype="float32", scope="shared")
        p1_shared = T.alloc_buffer([T.int64(64), T.int64(3), T.int64(7), T.int64(7)], dtype="float32", scope="shared")
        for nn_0_ff_0_yy_0_xx_0_fused in T.thread_binding(T.int64(8), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":1024, "pragma_unroll_explicit":1}):
            for nn_1_ff_1_yy_1_xx_1_fused in T.thread_binding(T.int64(2), thread="vthread.x"):
                for nn_2_ff_2_yy_2_xx_2_fused in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                    for nn_3_init, ff_3_init, yy_3_init, xx_3_init, nn_4_init, ff_4_init, yy_4_init, xx_4_init in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                        with T.block("conv2d_nchw_init"):
                            v_nn = T.axis.spatial(T.int64(1), nn_3_init + nn_4_init)
                            v_ff = T.axis.spatial(T.int64(64), ff_4_init + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ff_3_init)
                            v_yy = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(7) + yy_3_init + yy_4_init)
                            v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + xx_3_init * T.int64(7) + xx_4_init)
                            T.reads()
                            T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                            conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = T.float32(0)
                    for rc_0, ry_0, rx_0 in T.grid(T.int64(3), T.int64(7), T.int64(7)):
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(63)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(3)):
                                    with T.block("pad_temp_shared"):
                                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2 < T.int64(6021))
                                        v0 = T.axis.spatial(T.int64(1), T.int64(0))
                                        v1 = T.axis.spatial(T.int64(3), rc_0 + T.int64(0))
                                        v2 = T.axis.spatial(T.int64(230), ry_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(6021) // T.int64(27))
                                        v3 = T.axis.spatial(T.int64(230), nn_0_ff_0_yy_0_xx_0_fused * T.int64(28) + rx_0 + ((ax0_ax1_ax2_ax3_fused_0 * T.int64(32) + ax0_ax1_ax2_ax3_fused_1) * T.int64(3) + ax0_ax1_ax2_ax3_fused_2) % T.int64(27))
                                        T.reads(p0[v0, v1, v2, v3])
                                        T.writes(pad_temp_shared[v0, v1, v2, v3])
                                        pad_temp_shared[v0, v1, v2, v3] = p0[v0, v1, v2, v3]
                        for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(1)):
                            for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(32), thread="threadIdx.x"):
                                for ax0_ax1_ax2_ax3_fused_2 in T.vectorized(T.int64(2)):
                                    with T.block("p1_shared"):
                                        v0 = T.axis.spatial(T.int64(64), ax0_ax1_ax2_ax3_fused_0 * T.int64(64) + ax0_ax1_ax2_ax3_fused_1 * T.int64(2) + ax0_ax1_ax2_ax3_fused_2)
                                        v1, v2, v3 = T.axis.remap("SSS", [rc_0, ry_0, rx_0])
                                        T.reads(p1[v0, v1, v2, v3])
                                        T.writes(p1_shared[v0, v1, v2, v3])
                                        p1_shared[v0, v1, v2, v3] = p1[v0, v1, v2, v3]
                        for rc_1, ry_1, rx_1, nn_3, ff_3, yy_3, xx_3, rc_2, ry_2, rx_2, nn_4, ff_4, yy_4, xx_4 in T.grid(T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(16), T.int64(7), T.int64(2), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(1), T.int64(7)):
                            with T.block("conv2d_nchw_update"):
                                v_nn = T.axis.spatial(T.int64(1), nn_3 + nn_4)
                                v_ff = T.axis.spatial(T.int64(64), ff_4 + nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ff_3)
                                v_yy = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(7) + yy_3 + yy_4)
                                v_xx = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + xx_3 * T.int64(7) + xx_4)
                                v_rc = T.axis.reduce(T.int64(3), rc_0 + rc_1 + rc_2)
                                v_ry = T.axis.reduce(T.int64(7), ry_2 + ry_0 + ry_1)
                                v_rx = T.axis.reduce(T.int64(7), rx_1 + rx_2 + rx_0)
                                T.reads(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx], pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx], p1_shared[v_ff, v_rc, v_ry, v_rx])
                                T.writes(conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive":1024, "meta_schedule.thread_extent_low_inclusive":32, "meta_schedule.tiling_structure":"SSSRRSRS"})
                                conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] = conv2d_nchw_local[v_nn, v_ff, v_yy, v_xx] + pad_temp_shared[v_nn, v_rc, v_yy * T.int64(2) + v_ry, v_xx * T.int64(2) + v_rx] * p1_shared[v_ff, v_rc, v_ry, v_rx]
                    for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(16), T.int64(7), T.int64(14)):
                        with T.block("conv2d_nchw_local"):
                            v0 = T.axis.spatial(T.int64(1), ax0)
                            v1 = T.axis.spatial(T.int64(64), nn_2_ff_2_yy_2_xx_2_fused // T.int64(8) * T.int64(16) + ax1)
                            v2 = T.axis.spatial(T.int64(112), nn_1_ff_1_yy_1_xx_1_fused * T.int64(56) + nn_2_ff_2_yy_2_xx_2_fused % T.int64(8) * T.int64(7) + ax2)
                            v3 = T.axis.spatial(T.int64(112), nn_0_ff_0_yy_0_xx_0_fused * T.int64(14) + ax3)
                            T.reads(conv2d_nchw_local[v0, v1, v2, v3])
                            T.writes(conv2d_nchw[v0, v1, v2, v3])
                            conv2d_nchw[v0, v1, v2, v3] = conv2d_nchw_local[v0, v1, v2, v3]
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step":1024, "pragma_unroll_explicit":1}):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(4)):
                    with T.block("T_add_1"):
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(64), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(12544))
                        v_ax2 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(12544) // T.int64(112))
                        v_ax3 = T.axis.spatial(T.int64(112), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(112))
                        T.reads(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3], p2[v_ax1], p3[v_ax1], p4[v_ax1])
                        T.writes(T_relu[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_relu[v_ax0, v_ax1, v_ax2, v_ax3] = T.max(conv2d_nchw[v_ax0, v_ax1, v_ax2, v_ax3] + ((T.float32(0) - p2[v_ax1]) * p3[v_ax1] + p4[v_ax1]), T.float32(0))
    

b0 = sch.get_block(name="pad_temp", func_name="main")
b1 = sch.get_block(name="conv2d_nchw", func_name="main")
b2 = sch.get_block(name="T_negative", func_name="main")
b3 = sch.get_block(name="T_multiply", func_name="main")
b4 = sch.get_block(name="T_add", func_name="main")
b5 = sch.get_block(name="T_expand_dims", func_name="main")
b6 = sch.get_block(name="T_expand_dims_1", func_name="main")
b7 = sch.get_block(name="T_add_1", func_name="main")
b8 = sch.get_block(name="T_relu", func_name="main")
b9 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l10, l11, l12, l13, l14, l15, l16 = sch.get_loops(block=b1)
v17, v18, v19, v20, v21 = sch.sample_perfect_tile(loop=l10, n=5, max_innermost_factor=64, decision=[1, 1, 1, 1, 1])
l22, l23, l24, l25, l26 = sch.split(loop=l10, factors=[v17, v18, v19, v20, v21], preserve_unit_iters=True)
v27, v28, v29, v30, v31 = sch.sample_perfect_tile(loop=l11, n=5, max_innermost_factor=64, decision=[1, 1, 4, 16, 1])
l32, l33, l34, l35, l36 = sch.split(loop=l11, factors=[v27, v28, v29, v30, v31], preserve_unit_iters=True)
v37, v38, v39, v40, v41 = sch.sample_perfect_tile(loop=l12, n=5, max_innermost_factor=64, decision=[1, 2, 8, 7, 1])
l42, l43, l44, l45, l46 = sch.split(loop=l12, factors=[v37, v38, v39, v40, v41], preserve_unit_iters=True)
v47, v48, v49, v50, v51 = sch.sample_perfect_tile(loop=l13, n=5, max_innermost_factor=64, decision=[8, 1, 1, 2, 7])
l52, l53, l54, l55, l56 = sch.split(loop=l13, factors=[v47, v48, v49, v50, v51], preserve_unit_iters=True)
v57, v58, v59 = sch.sample_perfect_tile(loop=l14, n=3, max_innermost_factor=64, decision=[3, 1, 1])
l60, l61, l62 = sch.split(loop=l14, factors=[v57, v58, v59], preserve_unit_iters=True)
v63, v64, v65 = sch.sample_perfect_tile(loop=l15, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l66, l67, l68 = sch.split(loop=l15, factors=[v63, v64, v65], preserve_unit_iters=True)
v69, v70, v71 = sch.sample_perfect_tile(loop=l16, n=3, max_innermost_factor=64, decision=[7, 1, 1])
l72, l73, l74 = sch.split(loop=l16, factors=[v69, v70, v71], preserve_unit_iters=True)
sch.reorder(l22, l32, l42, l52, l23, l33, l43, l53, l24, l34, l44, l54, l60, l66, l72, l61, l67, l73, l25, l35, l45, l55, l62, l68, l74, l26, l36, l46, l56)
l75 = sch.fuse(l22, l32, l42, l52, preserve_unit_iters=True)
sch.bind(loop=l75, thread_axis="blockIdx.x")
l76 = sch.fuse(l23, l33, l43, l53, preserve_unit_iters=True)
sch.bind(loop=l76, thread_axis="vthread.x")
l77 = sch.fuse(l24, l34, l44, l54, preserve_unit_iters=True)
sch.bind(loop=l77, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=32)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b78 = sch.cache_write(block=b1, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b78, loop=l77, preserve_unit_loops=True, index=-1)
b79 = sch.cache_read(block=b1, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b79, loop=l72, preserve_unit_loops=True, index=-1)
l80, l81, l82, l83, l84, l85, l86, l87, l88, l89 = sch.get_loops(block=b79)
l90 = sch.fuse(l86, l87, l88, l89, preserve_unit_iters=True)
v91 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch", ann_val=v91)
b92 = sch.cache_read(block=b1, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b1])
sch.compute_at(block=b92, loop=l72, preserve_unit_loops=True, index=-1)
l93, l94, l95, l96, l97, l98, l99, l100, l101, l102 = sch.get_loops(block=b92)
l103 = sch.fuse(l99, l100, l101, l102, preserve_unit_iters=True)
v104 = sch.sample_categorical(candidates=[1, 2, 3, 4], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch", ann_val=v104)
sch.reverse_compute_inline(block=b8)
sch.compute_inline(block=b6)
sch.compute_inline(block=b5)
sch.compute_inline(block=b4)
sch.compute_inline(block=b3)
sch.compute_inline(block=b2)
sch.compute_inline(block=b0)
v105 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b9, ann_key="meta_schedule.unroll_explicit", ann_val=v105)
l106, l107, l108, l109 = sch.get_loops(block=b7)
l110 = sch.fuse(l106, l107, l108, l109, preserve_unit_iters=True)
l111, l112, l113 = sch.split(loop=l110, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l112, l113, l111)
sch.bind(loop=l112, thread_axis="blockIdx.x")
sch.bind(loop=l113, thread_axis="threadIdx.x")
sch.enter_postproc()
sch.unannotate(block_or_loop=b79, ann_key="meta_schedule.cooperative_fetch")
l114, l115, l116, l117, l118, l119, l120 = sch.get_loops(block=b79)
l121, l122, l123 = sch.split(loop=l120, factors=[None, 32, 3], preserve_unit_iters=True)
sch.vectorize(loop=l123)
sch.bind(loop=l122, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b92, ann_key="meta_schedule.cooperative_fetch")
l124, l125, l126, l127, l128, l129, l130 = sch.get_loops(block=b92)
l131, l132, l133 = sch.split(loop=l130, factors=[None, 32, 2], preserve_unit_iters=True)
sch.vectorize(loop=l133)
sch.bind(loop=l132, thread_axis="threadIdx.x")
b134 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b134, ann_key="meta_schedule.unroll_explicit")
b135, b136, b137, b138, b139 = sch.get_child_blocks(b134)
l140, l141, l142, l143, l144, l145, l146, l147, l148 = sch.get_loops(block=b135)
sch.annotate(block_or_loop=l140, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l140, ann_key="pragma_unroll_explicit", ann_val=1)
l149, l150, l151, l152, l153, l154, l155, l156, l157 = sch.get_loops(block=b136)
sch.annotate(block_or_loop=l149, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l149, ann_key="pragma_unroll_explicit", ann_val=1)
l158, l159, l160, l161, l162, l163, l164, l165, l166, l167, l168, l169, l170, l171, l172, l173, l174, l175, l176, l177 = sch.get_loops(block=b137)
sch.annotate(block_or_loop=l158, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l158, ann_key="pragma_unroll_explicit", ann_val=1)
l178, l179, l180, l181, l182, l183, l184 = sch.get_loops(block=b138)
sch.annotate(block_or_loop=l178, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l178, ann_key="pragma_unroll_explicit", ann_val=1)
l185, l186, l187 = sch.get_loops(block=b139)
sch.annotate(block_or_loop=l185, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l185, ann_key="pragma_unroll_explicit", ann_val=1)
b188 = sch.get_block(name="conv2d_nchw", func_name="main")
l189, l190, l191, l192, l193, l194, l195, l196, l197, l198, l199, l200, l201, l202, l203, l204, l205, l206, l207, l208 = sch.get_loops(block=b188)
b209 = sch.decompose_reduction(block=b188, loop=l192)
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #2: GFLOPs: 559.8903. Time: 424.4291 us. Best GFLOPs: 559.8903
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #3: GFLOPs: 100.7030. Time: 2359.7485 us. Best GFLOPs: 559.8903
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #4: GFLOPs: 1412.2724. Time: 168.2634 us. Best GFLOPs: 1412.2724
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #5: GFLOPs: 731.9194. Time: 324.6720 us. Best GFLOPs: 1412.2724
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #6: GFLOPs: 160.2588. Time: 1482.8122 us. Best GFLOPs: 1412.2724
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #7: GFLOPs: 6423.8804. Time: 36.9922 us. Best GFLOPs: 6423.8804
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #8: GFLOPs: 2785.7911. Time: 85.3021 us. Best GFLOPs: 6423.8804
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #9: GFLOPs: 390.3181. Time: 608.8207 us. Best GFLOPs: 6423.8804
2023-04-12 19:03:30 [INFO] [task_scheduler.cc:131] [Task #44: fused_nn_conv2d_negative_multiply_add_expand_dims_expand_dims_add_nn_relu] Trial #10: GFLOPs: 560.0787. Time: 424.2863 us. Best GFLOPs: 6423.8804
