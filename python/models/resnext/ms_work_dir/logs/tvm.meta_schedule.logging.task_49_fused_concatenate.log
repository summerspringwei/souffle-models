2023-04-12 18:56:02 [INFO] [task_scheduler.cc:160] Initializing Task #49: "fused_concatenate"
2023-04-12 18:56:02 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p1: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p2: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p3: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p4: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p5: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p6: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p7: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p8: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p9: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p10: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p11: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p12: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p13: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p14: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p15: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p16: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p17: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p18: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p19: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p20: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p21: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p22: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p23: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p24: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p25: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p26: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p27: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p28: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p29: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p30: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p31: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p32: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p33: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p34: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p35: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p36: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p37: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p38: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p39: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p40: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p41: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p42: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p43: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p44: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p45: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p46: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p47: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p48: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p49: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p50: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p51: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p52: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p53: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p54: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p55: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p56: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p57: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p58: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p59: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p60: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p61: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p62: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p63: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], T_concat: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0, ax1, ax2, ax3 in T.grid(T.int64(1), T.int64(256), T.int64(56), T.int64(56)):
            with T.block("T_concat"):
                v_ax0, v_ax1, v_ax2, v_ax3 = T.axis.remap("SSSS", [ax0, ax1, ax2, ax3])
                T.reads(p63[v_ax0, v_ax1 - T.int64(252), v_ax2, v_ax3], p62[v_ax0, v_ax1 - T.int64(248), v_ax2, v_ax3], p61[v_ax0, v_ax1 - T.int64(244), v_ax2, v_ax3], p60[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p59[v_ax0, v_ax1 - T.int64(236), v_ax2, v_ax3], p58[v_ax0, v_ax1 - T.int64(232), v_ax2, v_ax3], p57[v_ax0, v_ax1 - T.int64(228), v_ax2, v_ax3], p56[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], p55[v_ax0, v_ax1 - T.int64(220), v_ax2, v_ax3], p54[v_ax0, v_ax1 - T.int64(216), v_ax2, v_ax3], p53[v_ax0, v_ax1 - T.int64(212), v_ax2, v_ax3], p52[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], p51[v_ax0, v_ax1 - T.int64(204), v_ax2, v_ax3], p50[v_ax0, v_ax1 - T.int64(200), v_ax2, v_ax3], p49[v_ax0, v_ax1 - T.int64(196), v_ax2, v_ax3], p48[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p47[v_ax0, v_ax1 - T.int64(188), v_ax2, v_ax3], p46[v_ax0, v_ax1 - T.int64(184), v_ax2, v_ax3], p45[v_ax0, v_ax1 - T.int64(180), v_ax2, v_ax3], p44[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], p43[v_ax0, v_ax1 - T.int64(172), v_ax2, v_ax3], p42[v_ax0, v_ax1 - T.int64(168), v_ax2, v_ax3], p41[v_ax0, v_ax1 - T.int64(164), v_ax2, v_ax3], p40[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], p39[v_ax0, v_ax1 - T.int64(156), v_ax2, v_ax3], p38[v_ax0, v_ax1 - T.int64(152), v_ax2, v_ax3], p37[v_ax0, v_ax1 - T.int64(148), v_ax2, v_ax3], p36[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], p35[v_ax0, v_ax1 - T.int64(140), v_ax2, v_ax3], p34[v_ax0, v_ax1 - T.int64(136), v_ax2, v_ax3], p33[v_ax0, v_ax1 - T.int64(132), v_ax2, v_ax3], p32[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], p31[v_ax0, v_ax1 - T.int64(124), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(120), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(116), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(108), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(104), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(100), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(92), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(88), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(84), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(76), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(72), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(68), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(60), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(56), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(52), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(44), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(40), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(36), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(28), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(24), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(20), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(12), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(8), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(4), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(252) <= v_ax1, p63[v_ax0, v_ax1 - T.int64(252), v_ax2, v_ax3], T.if_then_else(T.int64(248) <= v_ax1, p62[v_ax0, v_ax1 - T.int64(248), v_ax2, v_ax3], T.if_then_else(T.int64(244) <= v_ax1, p61[v_ax0, v_ax1 - T.int64(244), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p60[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(236) <= v_ax1, p59[v_ax0, v_ax1 - T.int64(236), v_ax2, v_ax3], T.if_then_else(T.int64(232) <= v_ax1, p58[v_ax0, v_ax1 - T.int64(232), v_ax2, v_ax3], T.if_then_else(T.int64(228) <= v_ax1, p57[v_ax0, v_ax1 - T.int64(228), v_ax2, v_ax3], T.if_then_else(T.int64(224) <= v_ax1, p56[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], T.if_then_else(T.int64(220) <= v_ax1, p55[v_ax0, v_ax1 - T.int64(220), v_ax2, v_ax3], T.if_then_else(T.int64(216) <= v_ax1, p54[v_ax0, v_ax1 - T.int64(216), v_ax2, v_ax3], T.if_then_else(T.int64(212) <= v_ax1, p53[v_ax0, v_ax1 - T.int64(212), v_ax2, v_ax3], T.if_then_else(T.int64(208) <= v_ax1, p52[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], T.if_then_else(T.int64(204) <= v_ax1, p51[v_ax0, v_ax1 - T.int64(204), v_ax2, v_ax3], T.if_then_else(T.int64(200) <= v_ax1, p50[v_ax0, v_ax1 - T.int64(200), v_ax2, v_ax3], T.if_then_else(T.int64(196) <= v_ax1, p49[v_ax0, v_ax1 - T.int64(196), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p48[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], T.if_then_else(T.int64(188) <= v_ax1, p47[v_ax0, v_ax1 - T.int64(188), v_ax2, v_ax3], T.if_then_else(T.int64(184) <= v_ax1, p46[v_ax0, v_ax1 - T.int64(184), v_ax2, v_ax3], T.if_then_else(T.int64(180) <= v_ax1, p45[v_ax0, v_ax1 - T.int64(180), v_ax2, v_ax3], T.if_then_else(T.int64(176) <= v_ax1, p44[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], T.if_then_else(T.int64(172) <= v_ax1, p43[v_ax0, v_ax1 - T.int64(172), v_ax2, v_ax3], T.if_then_else(T.int64(168) <= v_ax1, p42[v_ax0, v_ax1 - T.int64(168), v_ax2, v_ax3], T.if_then_else(T.int64(164) <= v_ax1, p41[v_ax0, v_ax1 - T.int64(164), v_ax2, v_ax3], T.if_then_else(T.int64(160) <= v_ax1, p40[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], T.if_then_else(T.int64(156) <= v_ax1, p39[v_ax0, v_ax1 - T.int64(156), v_ax2, v_ax3], T.if_then_else(T.int64(152) <= v_ax1, p38[v_ax0, v_ax1 - T.int64(152), v_ax2, v_ax3], T.if_then_else(T.int64(148) <= v_ax1, p37[v_ax0, v_ax1 - T.int64(148), v_ax2, v_ax3], T.if_then_else(T.int64(144) <= v_ax1, p36[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], T.if_then_else(T.int64(140) <= v_ax1, p35[v_ax0, v_ax1 - T.int64(140), v_ax2, v_ax3], T.if_then_else(T.int64(136) <= v_ax1, p34[v_ax0, v_ax1 - T.int64(136), v_ax2, v_ax3], T.if_then_else(T.int64(132) <= v_ax1, p33[v_ax0, v_ax1 - T.int64(132), v_ax2, v_ax3], T.if_then_else(T.int64(128) <= v_ax1, p32[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], T.if_then_else(T.int64(124) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(124), v_ax2, v_ax3], T.if_then_else(T.int64(120) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(120), v_ax2, v_ax3], T.if_then_else(T.int64(116) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(116), v_ax2, v_ax3], T.if_then_else(T.int64(112) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], T.if_then_else(T.int64(108) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(108), v_ax2, v_ax3], T.if_then_else(T.int64(104) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(104), v_ax2, v_ax3], T.if_then_else(T.int64(100) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(100), v_ax2, v_ax3], T.if_then_else(T.int64(96) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], T.if_then_else(T.int64(92) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(92), v_ax2, v_ax3], T.if_then_else(T.int64(88) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(88), v_ax2, v_ax3], T.if_then_else(T.int64(84) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(84), v_ax2, v_ax3], T.if_then_else(T.int64(80) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], T.if_then_else(T.int64(76) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(76), v_ax2, v_ax3], T.if_then_else(T.int64(72) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(72), v_ax2, v_ax3], T.if_then_else(T.int64(68) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(68), v_ax2, v_ax3], T.if_then_else(T.int64(64) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], T.if_then_else(T.int64(60) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(60), v_ax2, v_ax3], T.if_then_else(T.int64(56) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(56), v_ax2, v_ax3], T.if_then_else(T.int64(52) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(52), v_ax2, v_ax3], T.if_then_else(T.int64(48) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], T.if_then_else(T.int64(44) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(44), v_ax2, v_ax3], T.if_then_else(T.int64(40) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(40), v_ax2, v_ax3], T.if_then_else(T.int64(36) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(36), v_ax2, v_ax3], T.if_then_else(T.int64(32) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], T.if_then_else(T.int64(28) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(28), v_ax2, v_ax3], T.if_then_else(T.int64(24) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(24), v_ax2, v_ax3], T.if_then_else(T.int64(20) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(20), v_ax2, v_ax3], T.if_then_else(T.int64(16) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], T.if_then_else(T.int64(12) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(12), v_ax2, v_ax3], T.if_then_else(T.int64(8) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(8), v_ax2, v_ax3], T.if_then_else(T.int64(4) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(4), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32")
    

2023-04-12 18:56:02 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2023-04-12 18:56:02 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p1: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p2: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p3: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p4: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p5: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p6: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p7: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p8: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p9: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p10: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p11: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p12: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p13: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p14: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p15: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p16: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p17: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p18: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p19: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p20: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p21: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p22: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p23: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p24: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p25: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p26: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p27: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p28: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p29: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p30: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p31: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p32: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p33: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p34: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p35: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p36: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p37: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p38: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p39: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p40: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p41: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p42: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p43: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p44: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p45: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p46: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p47: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p48: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p49: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p50: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p51: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p52: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p53: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p54: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p55: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p56: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p57: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p58: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p59: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p60: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p61: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p62: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], p63: T.Buffer[(T.int64(1), T.int64(4), T.int64(56), T.int64(56)), "float32"], T_concat: T.Buffer[(T.int64(1), T.int64(256), T.int64(56), T.int64(56)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        for ax0_ax1_ax2_ax3_fused_1 in T.thread_binding(T.int64(256), thread="blockIdx.x"):
            for ax0_ax1_ax2_ax3_fused_2 in T.thread_binding(T.int64(1024), thread="threadIdx.x"):
                for ax0_ax1_ax2_ax3_fused_0 in T.serial(T.int64(4)):
                    with T.block("T_concat"):
                        T.where((ax0_ax1_ax2_ax3_fused_0 * T.int64(256) + ax0_ax1_ax2_ax3_fused_1) * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2 < T.int64(802816))
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(256), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) // T.int64(3136))
                        v_ax2 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(3136) // T.int64(56))
                        v_ax3 = T.axis.spatial(T.int64(56), (ax0_ax1_ax2_ax3_fused_0 * T.int64(262144) + ax0_ax1_ax2_ax3_fused_1 * T.int64(1024) + ax0_ax1_ax2_ax3_fused_2) % T.int64(56))
                        T.reads(p63[v_ax0, v_ax1 - T.int64(252), v_ax2, v_ax3], p62[v_ax0, v_ax1 - T.int64(248), v_ax2, v_ax3], p61[v_ax0, v_ax1 - T.int64(244), v_ax2, v_ax3], p60[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], p59[v_ax0, v_ax1 - T.int64(236), v_ax2, v_ax3], p58[v_ax0, v_ax1 - T.int64(232), v_ax2, v_ax3], p57[v_ax0, v_ax1 - T.int64(228), v_ax2, v_ax3], p56[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], p55[v_ax0, v_ax1 - T.int64(220), v_ax2, v_ax3], p54[v_ax0, v_ax1 - T.int64(216), v_ax2, v_ax3], p53[v_ax0, v_ax1 - T.int64(212), v_ax2, v_ax3], p52[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], p51[v_ax0, v_ax1 - T.int64(204), v_ax2, v_ax3], p50[v_ax0, v_ax1 - T.int64(200), v_ax2, v_ax3], p49[v_ax0, v_ax1 - T.int64(196), v_ax2, v_ax3], p48[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], p47[v_ax0, v_ax1 - T.int64(188), v_ax2, v_ax3], p46[v_ax0, v_ax1 - T.int64(184), v_ax2, v_ax3], p45[v_ax0, v_ax1 - T.int64(180), v_ax2, v_ax3], p44[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], p43[v_ax0, v_ax1 - T.int64(172), v_ax2, v_ax3], p42[v_ax0, v_ax1 - T.int64(168), v_ax2, v_ax3], p41[v_ax0, v_ax1 - T.int64(164), v_ax2, v_ax3], p40[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], p39[v_ax0, v_ax1 - T.int64(156), v_ax2, v_ax3], p38[v_ax0, v_ax1 - T.int64(152), v_ax2, v_ax3], p37[v_ax0, v_ax1 - T.int64(148), v_ax2, v_ax3], p36[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], p35[v_ax0, v_ax1 - T.int64(140), v_ax2, v_ax3], p34[v_ax0, v_ax1 - T.int64(136), v_ax2, v_ax3], p33[v_ax0, v_ax1 - T.int64(132), v_ax2, v_ax3], p32[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], p31[v_ax0, v_ax1 - T.int64(124), v_ax2, v_ax3], p30[v_ax0, v_ax1 - T.int64(120), v_ax2, v_ax3], p29[v_ax0, v_ax1 - T.int64(116), v_ax2, v_ax3], p28[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], p27[v_ax0, v_ax1 - T.int64(108), v_ax2, v_ax3], p26[v_ax0, v_ax1 - T.int64(104), v_ax2, v_ax3], p25[v_ax0, v_ax1 - T.int64(100), v_ax2, v_ax3], p24[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], p23[v_ax0, v_ax1 - T.int64(92), v_ax2, v_ax3], p22[v_ax0, v_ax1 - T.int64(88), v_ax2, v_ax3], p21[v_ax0, v_ax1 - T.int64(84), v_ax2, v_ax3], p20[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], p19[v_ax0, v_ax1 - T.int64(76), v_ax2, v_ax3], p18[v_ax0, v_ax1 - T.int64(72), v_ax2, v_ax3], p17[v_ax0, v_ax1 - T.int64(68), v_ax2, v_ax3], p16[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], p15[v_ax0, v_ax1 - T.int64(60), v_ax2, v_ax3], p14[v_ax0, v_ax1 - T.int64(56), v_ax2, v_ax3], p13[v_ax0, v_ax1 - T.int64(52), v_ax2, v_ax3], p12[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], p11[v_ax0, v_ax1 - T.int64(44), v_ax2, v_ax3], p10[v_ax0, v_ax1 - T.int64(40), v_ax2, v_ax3], p9[v_ax0, v_ax1 - T.int64(36), v_ax2, v_ax3], p8[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], p7[v_ax0, v_ax1 - T.int64(28), v_ax2, v_ax3], p6[v_ax0, v_ax1 - T.int64(24), v_ax2, v_ax3], p5[v_ax0, v_ax1 - T.int64(20), v_ax2, v_ax3], p4[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], p3[v_ax0, v_ax1 - T.int64(12), v_ax2, v_ax3], p2[v_ax0, v_ax1 - T.int64(8), v_ax2, v_ax3], p1[v_ax0, v_ax1 - T.int64(4), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3])
                        T.writes(T_concat[v_ax0, v_ax1, v_ax2, v_ax3])
                        T_concat[v_ax0, v_ax1, v_ax2, v_ax3] = T.if_then_else(T.int64(252) <= v_ax1, p63[v_ax0, v_ax1 - T.int64(252), v_ax2, v_ax3], T.if_then_else(T.int64(248) <= v_ax1, p62[v_ax0, v_ax1 - T.int64(248), v_ax2, v_ax3], T.if_then_else(T.int64(244) <= v_ax1, p61[v_ax0, v_ax1 - T.int64(244), v_ax2, v_ax3], T.if_then_else(T.int64(240) <= v_ax1, p60[v_ax0, v_ax1 - T.int64(240), v_ax2, v_ax3], T.if_then_else(T.int64(236) <= v_ax1, p59[v_ax0, v_ax1 - T.int64(236), v_ax2, v_ax3], T.if_then_else(T.int64(232) <= v_ax1, p58[v_ax0, v_ax1 - T.int64(232), v_ax2, v_ax3], T.if_then_else(T.int64(228) <= v_ax1, p57[v_ax0, v_ax1 - T.int64(228), v_ax2, v_ax3], T.if_then_else(T.int64(224) <= v_ax1, p56[v_ax0, v_ax1 - T.int64(224), v_ax2, v_ax3], T.if_then_else(T.int64(220) <= v_ax1, p55[v_ax0, v_ax1 - T.int64(220), v_ax2, v_ax3], T.if_then_else(T.int64(216) <= v_ax1, p54[v_ax0, v_ax1 - T.int64(216), v_ax2, v_ax3], T.if_then_else(T.int64(212) <= v_ax1, p53[v_ax0, v_ax1 - T.int64(212), v_ax2, v_ax3], T.if_then_else(T.int64(208) <= v_ax1, p52[v_ax0, v_ax1 - T.int64(208), v_ax2, v_ax3], T.if_then_else(T.int64(204) <= v_ax1, p51[v_ax0, v_ax1 - T.int64(204), v_ax2, v_ax3], T.if_then_else(T.int64(200) <= v_ax1, p50[v_ax0, v_ax1 - T.int64(200), v_ax2, v_ax3], T.if_then_else(T.int64(196) <= v_ax1, p49[v_ax0, v_ax1 - T.int64(196), v_ax2, v_ax3], T.if_then_else(T.int64(192) <= v_ax1, p48[v_ax0, v_ax1 - T.int64(192), v_ax2, v_ax3], T.if_then_else(T.int64(188) <= v_ax1, p47[v_ax0, v_ax1 - T.int64(188), v_ax2, v_ax3], T.if_then_else(T.int64(184) <= v_ax1, p46[v_ax0, v_ax1 - T.int64(184), v_ax2, v_ax3], T.if_then_else(T.int64(180) <= v_ax1, p45[v_ax0, v_ax1 - T.int64(180), v_ax2, v_ax3], T.if_then_else(T.int64(176) <= v_ax1, p44[v_ax0, v_ax1 - T.int64(176), v_ax2, v_ax3], T.if_then_else(T.int64(172) <= v_ax1, p43[v_ax0, v_ax1 - T.int64(172), v_ax2, v_ax3], T.if_then_else(T.int64(168) <= v_ax1, p42[v_ax0, v_ax1 - T.int64(168), v_ax2, v_ax3], T.if_then_else(T.int64(164) <= v_ax1, p41[v_ax0, v_ax1 - T.int64(164), v_ax2, v_ax3], T.if_then_else(T.int64(160) <= v_ax1, p40[v_ax0, v_ax1 - T.int64(160), v_ax2, v_ax3], T.if_then_else(T.int64(156) <= v_ax1, p39[v_ax0, v_ax1 - T.int64(156), v_ax2, v_ax3], T.if_then_else(T.int64(152) <= v_ax1, p38[v_ax0, v_ax1 - T.int64(152), v_ax2, v_ax3], T.if_then_else(T.int64(148) <= v_ax1, p37[v_ax0, v_ax1 - T.int64(148), v_ax2, v_ax3], T.if_then_else(T.int64(144) <= v_ax1, p36[v_ax0, v_ax1 - T.int64(144), v_ax2, v_ax3], T.if_then_else(T.int64(140) <= v_ax1, p35[v_ax0, v_ax1 - T.int64(140), v_ax2, v_ax3], T.if_then_else(T.int64(136) <= v_ax1, p34[v_ax0, v_ax1 - T.int64(136), v_ax2, v_ax3], T.if_then_else(T.int64(132) <= v_ax1, p33[v_ax0, v_ax1 - T.int64(132), v_ax2, v_ax3], T.if_then_else(T.int64(128) <= v_ax1, p32[v_ax0, v_ax1 - T.int64(128), v_ax2, v_ax3], T.if_then_else(T.int64(124) <= v_ax1, p31[v_ax0, v_ax1 - T.int64(124), v_ax2, v_ax3], T.if_then_else(T.int64(120) <= v_ax1, p30[v_ax0, v_ax1 - T.int64(120), v_ax2, v_ax3], T.if_then_else(T.int64(116) <= v_ax1, p29[v_ax0, v_ax1 - T.int64(116), v_ax2, v_ax3], T.if_then_else(T.int64(112) <= v_ax1, p28[v_ax0, v_ax1 - T.int64(112), v_ax2, v_ax3], T.if_then_else(T.int64(108) <= v_ax1, p27[v_ax0, v_ax1 - T.int64(108), v_ax2, v_ax3], T.if_then_else(T.int64(104) <= v_ax1, p26[v_ax0, v_ax1 - T.int64(104), v_ax2, v_ax3], T.if_then_else(T.int64(100) <= v_ax1, p25[v_ax0, v_ax1 - T.int64(100), v_ax2, v_ax3], T.if_then_else(T.int64(96) <= v_ax1, p24[v_ax0, v_ax1 - T.int64(96), v_ax2, v_ax3], T.if_then_else(T.int64(92) <= v_ax1, p23[v_ax0, v_ax1 - T.int64(92), v_ax2, v_ax3], T.if_then_else(T.int64(88) <= v_ax1, p22[v_ax0, v_ax1 - T.int64(88), v_ax2, v_ax3], T.if_then_else(T.int64(84) <= v_ax1, p21[v_ax0, v_ax1 - T.int64(84), v_ax2, v_ax3], T.if_then_else(T.int64(80) <= v_ax1, p20[v_ax0, v_ax1 - T.int64(80), v_ax2, v_ax3], T.if_then_else(T.int64(76) <= v_ax1, p19[v_ax0, v_ax1 - T.int64(76), v_ax2, v_ax3], T.if_then_else(T.int64(72) <= v_ax1, p18[v_ax0, v_ax1 - T.int64(72), v_ax2, v_ax3], T.if_then_else(T.int64(68) <= v_ax1, p17[v_ax0, v_ax1 - T.int64(68), v_ax2, v_ax3], T.if_then_else(T.int64(64) <= v_ax1, p16[v_ax0, v_ax1 - T.int64(64), v_ax2, v_ax3], T.if_then_else(T.int64(60) <= v_ax1, p15[v_ax0, v_ax1 - T.int64(60), v_ax2, v_ax3], T.if_then_else(T.int64(56) <= v_ax1, p14[v_ax0, v_ax1 - T.int64(56), v_ax2, v_ax3], T.if_then_else(T.int64(52) <= v_ax1, p13[v_ax0, v_ax1 - T.int64(52), v_ax2, v_ax3], T.if_then_else(T.int64(48) <= v_ax1, p12[v_ax0, v_ax1 - T.int64(48), v_ax2, v_ax3], T.if_then_else(T.int64(44) <= v_ax1, p11[v_ax0, v_ax1 - T.int64(44), v_ax2, v_ax3], T.if_then_else(T.int64(40) <= v_ax1, p10[v_ax0, v_ax1 - T.int64(40), v_ax2, v_ax3], T.if_then_else(T.int64(36) <= v_ax1, p9[v_ax0, v_ax1 - T.int64(36), v_ax2, v_ax3], T.if_then_else(T.int64(32) <= v_ax1, p8[v_ax0, v_ax1 - T.int64(32), v_ax2, v_ax3], T.if_then_else(T.int64(28) <= v_ax1, p7[v_ax0, v_ax1 - T.int64(28), v_ax2, v_ax3], T.if_then_else(T.int64(24) <= v_ax1, p6[v_ax0, v_ax1 - T.int64(24), v_ax2, v_ax3], T.if_then_else(T.int64(20) <= v_ax1, p5[v_ax0, v_ax1 - T.int64(20), v_ax2, v_ax3], T.if_then_else(T.int64(16) <= v_ax1, p4[v_ax0, v_ax1 - T.int64(16), v_ax2, v_ax3], T.if_then_else(T.int64(12) <= v_ax1, p3[v_ax0, v_ax1 - T.int64(12), v_ax2, v_ax3], T.if_then_else(T.int64(8) <= v_ax1, p2[v_ax0, v_ax1 - T.int64(8), v_ax2, v_ax3], T.if_then_else(T.int64(4) <= v_ax1, p1[v_ax0, v_ax1 - T.int64(4), v_ax2, v_ax3], p0[v_ax0, v_ax1, v_ax2, v_ax3], dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32"), dtype="float32")
    

b0 = sch.get_block(name="T_concat", func_name="main")
l1, l2, l3, l4 = sch.get_loops(block=b0)
l5 = sch.fuse(l1, l2, l3, l4, preserve_unit_iters=True)
l6, l7, l8 = sch.split(loop=l5, factors=[None, 256, 1024], preserve_unit_iters=True)
sch.reorder(l7, l8, l6)
sch.bind(loop=l7, thread_axis="blockIdx.x")
sch.bind(loop=l8, thread_axis="threadIdx.x")
2023-04-12 19:02:10 [INFO] [evolutionary_search.cc:713] Generating candidates......
2023-04-12 19:02:10 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2023-04-12 19:02:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eec0dfa58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eecb80a88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef945f6b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef04cdf08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef0197998)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef12ac7a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eecc082e8)]: 0 failure(s)
2023-04-12 19:02:32 [INFO] [evolutionary_search.cc:723] Sampled 512 candidate(s)
2023-04-12 19:02:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eec0dfa58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eecb80a88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef945f6b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef04cdf08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef0197998)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef12ac7a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eecc082e8)]: 0 failure(s)
2023-04-12 19:02:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eec0dfa58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eecb80a88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef945f6b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef04cdf08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef0197998)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef12ac7a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eecc082e8)]: 0 failure(s)
2023-04-12 19:02:35 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eec0dfa58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eecb80a88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef945f6b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef04cdf08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef0197998)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef12ac7a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eecc082e8)]: 0 failure(s)
2023-04-12 19:02:36 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x564eec0dfa58)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x564eecb80a88)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x564ef945f6b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x564ef04cdf08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x564ef0197998)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x564ef12ac7a8)]: 0 failure(s)
Postproc #6 [meta_schedule.RewriteTensorize(0x564eecc082e8)]: 0 failure(s)
2023-04-12 19:02:37 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.2728
2023-04-12 19:02:37 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2023-04-12 19:02:37 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2023-04-12 19:03:31 [INFO] [task_scheduler.cc:131] [Task #49: fused_concatenate] Trial #1: GFLOPs: 0.0001. Time: 8.7657 us. Best GFLOPs: 0.0001
