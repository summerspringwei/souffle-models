2023-04-12 18:56:12 [INFO] [task_scheduler.cc:160] Initializing Task #66: "fused_mean"
2023-04-12 18:56:12 [INFO] [task_scheduler.cc:35] 
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"], T_divide: T.Buffer[(T.int64(1), T.int64(2048)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        # with T.block("root")
        p0_red = T.alloc_buffer([T.int64(1), T.int64(2048)], dtype="float32")
        for ax0, ax1, k2, k3 in T.grid(T.int64(1), T.int64(2048), T.int64(7), T.int64(7)):
            with T.block("p0_red"):
                v_ax0, v_ax1, v_k2, v_k3 = T.axis.remap("SSRR", [ax0, ax1, k2, k3])
                T.reads(p0[v_ax0, v_ax1, v_k2, v_k3])
                T.writes(p0_red[v_ax0, v_ax1])
                with T.init():
                    p0_red[v_ax0, v_ax1] = T.float32(0)
                p0_red[v_ax0, v_ax1] = p0_red[v_ax0, v_ax1] + p0[v_ax0, v_ax1, v_k2, v_k3]
        for ax0, ax1 in T.grid(T.int64(1), T.int64(2048)):
            with T.block("T_divide"):
                v_ax0, v_ax1 = T.axis.remap("SS", [ax0, ax1])
                T.reads(p0_red[v_ax0, v_ax1])
                T.writes(T_divide[v_ax0, v_ax1])
                T_divide[v_ax0, v_ax1] = p0_red[v_ax0, v_ax1] * T.float32(0.020408163265306121)
    

2023-04-12 18:56:12 [INFO] [task_scheduler.cc:164] Total 2 design space(s) generated
2023-04-12 18:56:12 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"], T_divide: T.Buffer[(T.int64(1), T.int64(2048)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":1024})
            p0_red = T.alloc_buffer([T.int64(1), T.int64(2048)], dtype="float32")
            for ax0_ax1_fused_0 in T.thread_binding(T.int64(4), thread="blockIdx.x"):
                for ax0_ax1_fused_1 in T.thread_binding(T.int64(512), thread="threadIdx.x"):
                    for k2, k3 in T.grid(T.int64(7), T.int64(7)):
                        with T.block("p0_red"):
                            v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_fused_0 * T.int64(512) + ax0_ax1_fused_1)
                            v_k2, v_k3 = T.axis.remap("RR", [k2, k3])
                            T.reads(p0[v_ax0, v_ax1, v_k2, v_k3])
                            T.writes(p0_red[v_ax0, v_ax1])
                            with T.init():
                                p0_red[v_ax0, v_ax1] = T.float32(0)
                            p0_red[v_ax0, v_ax1] = p0_red[v_ax0, v_ax1] + p0[v_ax0, v_ax1, v_k2, v_k3]
            for ax0_ax1_fused_0 in T.thread_binding(T.int64(32), thread="blockIdx.x"):
                for ax0_ax1_fused_1 in T.thread_binding(T.int64(64), thread="threadIdx.x"):
                    with T.block("T_divide"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_fused_0 * T.int64(64) + ax0_ax1_fused_1)
                        T.reads(p0_red[v_ax0, v_ax1])
                        T.writes(T_divide[v_ax0, v_ax1])
                        T_divide[v_ax0, v_ax1] = p0_red[v_ax0, v_ax1] * T.float32(0.020408163265306121)
    

b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="T_divide", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
v3 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v3)
l4, l5 = sch.get_loops(block=b1)
l6 = sch.fuse(l4, l5, preserve_unit_iters=True)
v7 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=1)
l8, l9 = sch.split(loop=l6, factors=[None, v7], preserve_unit_iters=True)
sch.bind(loop=l8, thread_axis="blockIdx.x")
sch.bind(loop=l9, thread_axis="threadIdx.x")
l10, l11, l12, l13 = sch.get_loops(block=b0)
l14 = sch.fuse(l10, l11, preserve_unit_iters=True)
v15 = sch.sample_categorical(candidates=[32, 64, 128, 256, 512, 1024], probs=[0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666, 0.16666666666666666], decision=4)
l16, l17 = sch.split(loop=l14, factors=[None, v15], preserve_unit_iters=True)
sch.bind(loop=l16, thread_axis="blockIdx.x")
sch.bind(loop=l17, thread_axis="threadIdx.x")
2023-04-12 18:56:12 [INFO] [task_scheduler.cc:170] Design space #1:
# from tvm.script import tir as T
@tvm.script.ir_module
class Module:
    @T.prim_func
    def main(p0: T.Buffer[(T.int64(1), T.int64(2048), T.int64(7), T.int64(7)), "float32"], T_divide: T.Buffer[(T.int64(1), T.int64(2048)), "float32"]):
        # function attr dict
        T.func_attr({"global_symbol": "main", "tir.noalias": True})
        # body
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit":16})
            p0_red_shared = T.alloc_buffer([T.int64(1), T.int64(2048)], dtype="float32", scope="shared")
            for ax0_ax1_0_fused in T.thread_binding(T.int64(16), thread="blockIdx.x"):
                for ax0, ax1, ax2_ax3_fused_0 in T.grid(T.int64(1), T.int64(128), T.int64(1)):
                    for ax2_ax3_fused_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                        with T.block("p0_red"):
                            T.where(ax2_ax3_fused_0 * T.int64(128) + ax2_ax3_fused_1 < T.int64(49))
                            v_ax0 = T.axis.spatial(T.int64(1), ax0)
                            v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_0_fused * T.int64(128) + ax1)
                            v_k2 = T.axis.reduce(T.int64(7), (ax2_ax3_fused_0 * T.int64(128) + ax2_ax3_fused_1) // T.int64(7))
                            v_k3 = T.axis.reduce(T.int64(7), (ax2_ax3_fused_0 * T.int64(128) + ax2_ax3_fused_1) % T.int64(7))
                            T.reads(p0[v_ax0, v_ax1, v_k2, v_k3])
                            T.writes(p0_red_shared[v_ax0, v_ax1])
                            with T.init():
                                p0_red_shared[v_ax0, v_ax1] = T.float32(0)
                            p0_red_shared[v_ax0, v_ax1] = p0_red_shared[v_ax0, v_ax1] + p0[v_ax0, v_ax1, v_k2, v_k3]
                for ax1_1 in T.thread_binding(T.int64(128), thread="threadIdx.x"):
                    with T.block("T_divide"):
                        v_ax0 = T.axis.spatial(T.int64(1), T.int64(0))
                        v_ax1 = T.axis.spatial(T.int64(2048), ax0_ax1_0_fused * T.int64(128) + ax1_1)
                        T.reads(p0_red_shared[v_ax0, v_ax1])
                        T.writes(T_divide[v_ax0, v_ax1])
                        T_divide[v_ax0, v_ax1] = p0_red_shared[v_ax0, v_ax1] * T.float32(0.020408163265306121)
    

b0 = sch.get_block(name="p0_red", func_name="main")
b1 = sch.get_block(name="T_divide", func_name="main")
b2 = sch.get_block(name="root", func_name="main")
b3, = sch.get_consumers(block=b0)
l4, l5 = sch.get_loops(block=b3)
v6 = sch.sample_categorical(candidates=[4, 8, 16, 32, 64, 128, 256, 512], probs=[0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125], decision=5)
l7, l8 = sch.split(loop=l5, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l8, thread_axis="threadIdx.x")
sch.compute_at(block=b0, loop=l7, preserve_unit_loops=True, index=-1)
sch.set_scope(block=b0, buffer_index=0, storage_scope="shared")
l9, l10, l11, l12, l13, l14 = sch.get_loops(block=b0)
l15 = sch.fuse(l13, l14, preserve_unit_iters=True)
l16, l17 = sch.split(loop=l15, factors=[None, v6], preserve_unit_iters=True)
sch.bind(loop=l17, thread_axis="threadIdx.x")
v18 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b2, ann_key="meta_schedule.unroll_explicit", ann_val=v18)
l19, l20, l21 = sch.get_loops(block=b1)
l22 = sch.fuse(l19, l20, preserve_unit_iters=True)
sch.bind(loop=l22, thread_axis="blockIdx.x")
